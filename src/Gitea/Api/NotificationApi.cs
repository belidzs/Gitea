/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Gitea.Client;
using Gitea.Model;

namespace Gitea.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyGetList (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyGetListWithHttpInfo (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        List<NotificationThread> NotifyGetRepoList (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        ApiResponse<List<NotificationThread>> NotifyGetRepoListWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>NotificationThread</returns>
        NotificationThread NotifyGetThread (string id);

        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        ApiResponse<NotificationThread> NotifyGetThreadWithHttpInfo (string id);
        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NotificationCount</returns>
        NotificationCount NotifyNewAvailable ();

        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NotificationCount</returns>
        ApiResponse<NotificationCount> NotifyNewAvailableWithHttpInfo ();
        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns></returns>
        void NotifyReadList (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string));

        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotifyReadListWithHttpInfo (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string));
        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns></returns>
        void NotifyReadRepoList (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime));

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotifyReadRepoListWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime));
        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns></returns>
        void NotifyReadThread (string id, string toStatus = default(string));

        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotifyReadThreadWithHttpInfo (string id, string toStatus = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetListAsync (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List users&#39;s notification threads
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetListAsyncWithHttpInfo (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetRepoListAsync (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List users&#39;s notification threads on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetRepoListAsyncWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>Task of NotificationThread</returns>
        System.Threading.Tasks.Task<NotificationThread> NotifyGetThreadAsync (string id);

        /// <summary>
        /// Get notification thread by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationThread>> NotifyGetThreadAsyncWithHttpInfo (string id);
        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NotificationCount</returns>
        System.Threading.Tasks.Task<NotificationCount> NotifyNewAvailableAsync ();

        /// <summary>
        /// Check if unread notifications exist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NotificationCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationCount>> NotifyNewAvailableAsyncWithHttpInfo ();
        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotifyReadListAsync (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string));

        /// <summary>
        /// Mark notification threads as read, pinned or unread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadListAsyncWithHttpInfo (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string));
        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotifyReadRepoListAsync (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime));

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadRepoListAsyncWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime));
        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotifyReadThreadAsync (string id, string toStatus = default(string));

        /// <summary>
        /// Mark notification thread as read by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadThreadAsyncWithHttpInfo (string id, string toStatus = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationApi : INotificationApi
    {
        private Gitea.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationApi(String basePath)
        {
            this.Configuration = new Gitea.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// </summary>
        /// <returns></returns>
        public NotificationApi()
        {
            this.Configuration = Gitea.Client.Configuration.Default;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationApi(Gitea.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Gitea.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyGetList (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<NotificationThread>> localVarResponse = NotifyGetListWithHttpInfo(all, statusTypes, since, before, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public ApiResponse<List<NotificationThread>> NotifyGetListWithHttpInfo (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {

            var localVarPath = "./notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationThread>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NotificationThread>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationThread>)));
        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetListAsync (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<NotificationThread>> localVarResponse = await NotifyGetListAsyncWithHttpInfo(all, statusTypes, since, before, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users&#39;s notification threads 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned. (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetListAsyncWithHttpInfo (string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {

            var localVarPath = "./notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationThread>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NotificationThread>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationThread>)));
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;NotificationThread&gt;</returns>
        public List<NotificationThread> NotifyGetRepoList (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<NotificationThread>> localVarResponse = NotifyGetRepoListWithHttpInfo(owner, repo, all, statusTypes, since, before, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;NotificationThread&gt;</returns>
        public ApiResponse<List<NotificationThread>> NotifyGetRepoListWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyGetRepoList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyGetRepoList");

            var localVarPath = "./repos/{owner}/{repo}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetRepoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationThread>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NotificationThread>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationThread>)));
        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;NotificationThread&gt;</returns>
        public async System.Threading.Tasks.Task<List<NotificationThread>> NotifyGetRepoListAsync (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<NotificationThread>> localVarResponse = await NotifyGetRepoListAsyncWithHttpInfo(owner, repo, all, statusTypes, since, before, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users&#39;s notification threads on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, show notifications marked as read. Default value is false (optional)</param>
        /// <param name="statusTypes">Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread &amp; pinned (optional)</param>
        /// <param name="since">Only show notifications updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show notifications updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NotificationThread&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NotificationThread>>> NotifyGetRepoListAsyncWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyGetRepoList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyGetRepoList");

            var localVarPath = "./repos/{owner}/{repo}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetRepoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NotificationThread>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<NotificationThread>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NotificationThread>)));
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>NotificationThread</returns>
        public NotificationThread NotifyGetThread (string id)
        {
             ApiResponse<NotificationThread> localVarResponse = NotifyGetThreadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>ApiResponse of NotificationThread</returns>
        public ApiResponse<NotificationThread> NotifyGetThreadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyGetThread");

            var localVarPath = "./notifications/threads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationThread>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NotificationThread) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationThread)));
        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>Task of NotificationThread</returns>
        public async System.Threading.Tasks.Task<NotificationThread> NotifyGetThreadAsync (string id)
        {
             ApiResponse<NotificationThread> localVarResponse = await NotifyGetThreadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get notification thread by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <returns>Task of ApiResponse (NotificationThread)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationThread>> NotifyGetThreadAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyGetThread");

            var localVarPath = "./notifications/threads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyGetThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationThread>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NotificationThread) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationThread)));
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NotificationCount</returns>
        public NotificationCount NotifyNewAvailable ()
        {
             ApiResponse<NotificationCount> localVarResponse = NotifyNewAvailableWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NotificationCount</returns>
        public ApiResponse<NotificationCount> NotifyNewAvailableWithHttpInfo ()
        {

            var localVarPath = "./notifications/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyNewAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NotificationCount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationCount)));
        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NotificationCount</returns>
        public async System.Threading.Tasks.Task<NotificationCount> NotifyNewAvailableAsync ()
        {
             ApiResponse<NotificationCount> localVarResponse = await NotifyNewAvailableAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if unread notifications exist 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NotificationCount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationCount>> NotifyNewAvailableAsyncWithHttpInfo ()
        {

            var localVarPath = "./notifications/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyNewAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationCount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (NotificationCount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationCount)));
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns></returns>
        public void NotifyReadList (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string))
        {
             NotifyReadListWithHttpInfo(lastReadAt, all, statusTypes, toStatus);
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotifyReadListWithHttpInfo (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string))
        {

            var localVarPath = "./notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastReadAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_read_at", lastReadAt)); // query parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotifyReadListAsync (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string))
        {
             await NotifyReadListAsyncWithHttpInfo(lastReadAt, all, statusTypes, toStatus);

        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as, Defaults to read. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadListAsyncWithHttpInfo (DateTime lastReadAt = default(DateTime), string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string))
        {

            var localVarPath = "./notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastReadAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_read_at", lastReadAt)); // query parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns></returns>
        public void NotifyReadRepoList (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime))
        {
             NotifyReadRepoListWithHttpInfo(owner, repo, all, statusTypes, toStatus, lastReadAt);
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotifyReadRepoListWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyReadRepoList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyReadRepoList");

            var localVarPath = "./repos/{owner}/{repo}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter
            if (lastReadAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_read_at", lastReadAt)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadRepoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotifyReadRepoListAsync (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime))
        {
             await NotifyReadRepoListAsyncWithHttpInfo(owner, repo, all, statusTypes, toStatus, lastReadAt);

        }

        /// <summary>
        /// Mark notification threads as read, pinned or unread on a specific repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="all">If true, mark all notifications on this repo. Default value is false (optional)</param>
        /// <param name="statusTypes">Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread. (optional)</param>
        /// <param name="toStatus">Status to mark notifications as. Defaults to read. (optional)</param>
        /// <param name="lastReadAt">Describes the last point that notifications were checked. Anything updated since this time will not be updated. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadRepoListAsyncWithHttpInfo (string owner, string repo, string all = default(string), List<string> statusTypes = default(List<string>), string toStatus = default(string), DateTime lastReadAt = default(DateTime))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling NotificationApi->NotifyReadRepoList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling NotificationApi->NotifyReadRepoList");

            var localVarPath = "./repos/{owner}/{repo}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "status-types", statusTypes)); // query parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter
            if (lastReadAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_read_at", lastReadAt)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadRepoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns></returns>
        public void NotifyReadThread (string id, string toStatus = default(string))
        {
             NotifyReadThreadWithHttpInfo(id, toStatus);
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotifyReadThreadWithHttpInfo (string id, string toStatus = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyReadThread");

            var localVarPath = "./notifications/threads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotifyReadThreadAsync (string id, string toStatus = default(string))
        {
             await NotifyReadThreadAsyncWithHttpInfo(id, toStatus);

        }

        /// <summary>
        /// Mark notification thread as read by ID 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of notification thread</param>
        /// <param name="toStatus">Status to mark notifications as (optional, default to &quot;read&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotifyReadThreadAsyncWithHttpInfo (string id, string toStatus = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NotificationApi->NotifyReadThread");

            var localVarPath = "./notifications/threads/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (toStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to-status", toStatus)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotifyReadThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
