/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Gitea.Client;
using Gitea.Model;

namespace Gitea.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepositoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        Repository CreateCurrentUserRepo (CreateRepoOption body = default(CreateRepoOption));

        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> CreateCurrentUserRepoWithHttpInfo (CreateRepoOption body = default(CreateRepoOption));
        /// <summary>
        /// Fork a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        Repository CreateFork (string owner, string repo, CreateForkOption body = default(CreateForkOption));

        /// <summary>
        /// Fork a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> CreateForkWithHttpInfo (string owner, string repo, CreateForkOption body = default(CreateForkOption));
        /// <summary>
        /// Gets the blob of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>GitBlobResponse</returns>
        GitBlobResponse GetBlob (string owner, string repo, string sha);

        /// <summary>
        /// Gets the blob of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>ApiResponse of GitBlobResponse</returns>
        ApiResponse<GitBlobResponse> GetBlobWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>AnnotatedTag</returns>
        AnnotatedTag GetTag (string owner, string repo, string sha);

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>ApiResponse of AnnotatedTag</returns>
        ApiResponse<AnnotatedTag> GetTagWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Gets the tree of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>GitTreeResponse</returns>
        GitTreeResponse GetTree (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int));

        /// <summary>
        /// Gets the tree of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>ApiResponse of GitTreeResponse</returns>
        ApiResponse<GitTreeResponse> GetTreeWithHttpInfo (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int));
        /// <summary>
        /// List a repository&#39;s forks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Repository> ListForks (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s forks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Repository>> ListForksWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Add a collaborator to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RepoAddCollaborator (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption));

        /// <summary>
        /// Add a collaborator to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoAddCollaboratorWithHttpInfo (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption));
        /// <summary>
        /// Add a topic to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns></returns>
        void RepoAddTopc (string owner, string repo, string topic);

        /// <summary>
        /// Add a topic to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoAddTopcWithHttpInfo (string owner, string repo, string topic);
        /// <summary>
        /// Check if a user is a collaborator of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns></returns>
        void RepoCheckCollaborator (string owner, string repo, string collaborator);

        /// <summary>
        /// Check if a user is a collaborator of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoCheckCollaboratorWithHttpInfo (string owner, string repo, string collaborator);
        /// <summary>
        /// Create a branch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Branch</returns>
        Branch RepoCreateBranch (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption));

        /// <summary>
        /// Create a branch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> RepoCreateBranchWithHttpInfo (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption));
        /// <summary>
        /// Create a branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BranchProtection</returns>
        BranchProtection RepoCreateBranchProtection (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption));

        /// <summary>
        /// Create a branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        ApiResponse<BranchProtection> RepoCreateBranchProtectionWithHttpInfo (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption));
        /// <summary>
        /// Create a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>FileResponse</returns>
        FileResponse RepoCreateFile (string owner, string repo, string filepath, CreateFileOptions body);

        /// <summary>
        /// Create a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> RepoCreateFileWithHttpInfo (string owner, string repo, string filepath, CreateFileOptions body);
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Hook</returns>
        Hook RepoCreateHook (string owner, string repo, CreateHookOption body = default(CreateHookOption));

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> RepoCreateHookWithHttpInfo (string owner, string repo, CreateHookOption body = default(CreateHookOption));
        /// <summary>
        /// Add a key to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DeployKey</returns>
        DeployKey RepoCreateKey (string owner, string repo, CreateKeyOption body = default(CreateKeyOption));

        /// <summary>
        /// Add a key to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DeployKey</returns>
        ApiResponse<DeployKey> RepoCreateKeyWithHttpInfo (string owner, string repo, CreateKeyOption body = default(CreateKeyOption));
        /// <summary>
        /// Create a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PullRequest</returns>
        PullRequest RepoCreatePullRequest (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption));

        /// <summary>
        /// Create a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PullRequest</returns>
        ApiResponse<PullRequest> RepoCreatePullRequestWithHttpInfo (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption));
        /// <summary>
        /// Create a review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>PullReview</returns>
        PullReview RepoCreatePullReview (string owner, string repo, long index, CreatePullReviewOptions body);

        /// <summary>
        /// Create a review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PullReview</returns>
        ApiResponse<PullReview> RepoCreatePullReviewWithHttpInfo (string owner, string repo, long index, CreatePullReviewOptions body);
        /// <summary>
        /// Create a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Release</returns>
        Release RepoCreateRelease (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption));

        /// <summary>
        /// Create a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> RepoCreateReleaseWithHttpInfo (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption));
        /// <summary>
        /// Create a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Attachment</returns>
        Attachment RepoCreateReleaseAttachment (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string));

        /// <summary>
        /// Create a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>ApiResponse of Attachment</returns>
        ApiResponse<Attachment> RepoCreateReleaseAttachmentWithHttpInfo (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string));
        /// <summary>
        /// Create a commit status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Status</returns>
        Status RepoCreateStatus (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption));

        /// <summary>
        /// Create a commit status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> RepoCreateStatusWithHttpInfo (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption));
        /// <summary>
        /// Delete a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns></returns>
        void RepoDelete (string owner, string repo);

        /// <summary>
        /// Delete a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Delete a specific branch from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns></returns>
        void RepoDeleteBranch (string owner, string repo, string branch);

        /// <summary>
        /// Delete a specific branch from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteBranchWithHttpInfo (string owner, string repo, string branch);
        /// <summary>
        /// Delete a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns></returns>
        void RepoDeleteBranchProtection (string owner, string repo, string name);

        /// <summary>
        /// Delete a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteBranchProtectionWithHttpInfo (string owner, string repo, string name);
        /// <summary>
        /// Delete a collaborator from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns></returns>
        void RepoDeleteCollaborator (string owner, string repo, string collaborator);

        /// <summary>
        /// Delete a collaborator from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteCollaboratorWithHttpInfo (string owner, string repo, string collaborator);
        /// <summary>
        /// Delete a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>FileDeleteResponse</returns>
        FileDeleteResponse RepoDeleteFile (string owner, string repo, string filepath, DeleteFileOptions body);

        /// <summary>
        /// Delete a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileDeleteResponse</returns>
        ApiResponse<FileDeleteResponse> RepoDeleteFileWithHttpInfo (string owner, string repo, string filepath, DeleteFileOptions body);
        /// <summary>
        /// Delete a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns></returns>
        void RepoDeleteGitHook (string owner, string repo, string id);

        /// <summary>
        /// Delete a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteGitHookWithHttpInfo (string owner, string repo, string id);
        /// <summary>
        /// Delete a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns></returns>
        void RepoDeleteHook (string owner, string repo, long id);

        /// <summary>
        /// Delete a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteHookWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a key from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns></returns>
        void RepoDeleteKey (string owner, string repo, long id);

        /// <summary>
        /// Delete a key from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteKeyWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a specific review from a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns></returns>
        void RepoDeletePullReview (string owner, string repo, long index, long id);

        /// <summary>
        /// Delete a specific review from a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeletePullReviewWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Delete a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns></returns>
        void RepoDeleteRelease (string owner, string repo, long id);

        /// <summary>
        /// Delete a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteReleaseWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns></returns>
        void RepoDeleteReleaseAttachment (string owner, string repo, long id, long attachmentId);

        /// <summary>
        /// Delete a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId);
        /// <summary>
        /// Delete a topic from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns></returns>
        void RepoDeleteTopic (string owner, string repo, string topic);

        /// <summary>
        /// Delete a topic from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoDeleteTopicWithHttpInfo (string owner, string repo, string topic);
        /// <summary>
        /// Get a pull request diff
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>string</returns>
        string RepoDownloadPullDiff (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request diff
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RepoDownloadPullDiffWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Get a pull request patch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>string</returns>
        string RepoDownloadPullPatch (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request patch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RepoDownloadPullPatchWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Repository</returns>
        Repository RepoEdit (string owner, string repo, EditRepoOption body = default(EditRepoOption));

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> RepoEditWithHttpInfo (string owner, string repo, EditRepoOption body = default(EditRepoOption));
        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BranchProtection</returns>
        BranchProtection RepoEditBranchProtection (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption));

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        ApiResponse<BranchProtection> RepoEditBranchProtectionWithHttpInfo (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption));
        /// <summary>
        /// Edit a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GitHook</returns>
        GitHook RepoEditGitHook (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption));

        /// <summary>
        /// Edit a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GitHook</returns>
        ApiResponse<GitHook> RepoEditGitHookWithHttpInfo (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption));
        /// <summary>
        /// Edit a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Hook</returns>
        Hook RepoEditHook (string owner, string repo, long id, EditHookOption body = default(EditHookOption));

        /// <summary>
        /// Edit a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> RepoEditHookWithHttpInfo (string owner, string repo, long id, EditHookOption body = default(EditHookOption));
        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PullRequest</returns>
        PullRequest RepoEditPullRequest (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption));

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PullRequest</returns>
        ApiResponse<PullRequest> RepoEditPullRequestWithHttpInfo (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption));
        /// <summary>
        /// Update a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Release</returns>
        Release RepoEditRelease (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption));

        /// <summary>
        /// Update a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> RepoEditReleaseWithHttpInfo (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption));
        /// <summary>
        /// Edit a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Attachment</returns>
        Attachment RepoEditReleaseAttachment (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions));

        /// <summary>
        /// Edit a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Attachment</returns>
        ApiResponse<Attachment> RepoEditReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions));
        /// <summary>
        /// Get a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Repository</returns>
        Repository RepoGet (string owner, string repo);

        /// <summary>
        /// Get a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> RepoGetWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get a list of all commits from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Commit&gt;</returns>
        List<Commit> RepoGetAllCommits (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Get a list of all commits from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Commit&gt;</returns>
        ApiResponse<List<Commit>> RepoGetAllCommitsWithHttpInfo (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get an archive of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns></returns>
        void RepoGetArchive (string owner, string repo, string archive);

        /// <summary>
        /// Get an archive of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoGetArchiveWithHttpInfo (string owner, string repo, string archive);
        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Branch</returns>
        Branch RepoGetBranch (string owner, string repo, string branch);

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>ApiResponse of Branch</returns>
        ApiResponse<Branch> RepoGetBranchWithHttpInfo (string owner, string repo, string branch);
        /// <summary>
        /// Get a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>BranchProtection</returns>
        BranchProtection RepoGetBranchProtection (string owner, string repo, string name);

        /// <summary>
        /// Get a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        ApiResponse<BranchProtection> RepoGetBranchProtectionWithHttpInfo (string owner, string repo, string name);
        /// <summary>
        /// Get a repository by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Repository</returns>
        Repository RepoGetByID (long id);

        /// <summary>
        /// Get a repository by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> RepoGetByIDWithHttpInfo (long id);
        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Status</returns>
        Status RepoGetCombinedStatusByRef (string owner, string repo, string _ref, int page = default(int));

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> RepoGetCombinedStatusByRefWithHttpInfo (string owner, string repo, string _ref, int page = default(int));
        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ContentsResponse</returns>
        ContentsResponse RepoGetContents (string owner, string repo, string filepath, string _ref = default(string));

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ApiResponse of ContentsResponse</returns>
        ApiResponse<ContentsResponse> RepoGetContentsWithHttpInfo (string owner, string repo, string filepath, string _ref = default(string));
        /// <summary>
        /// Gets the metadata of all the entries of the root dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>List&lt;ContentsResponse&gt;</returns>
        List<ContentsResponse> RepoGetContentsList (string owner, string repo, string _ref = default(string));

        /// <summary>
        /// Gets the metadata of all the entries of the root dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ApiResponse of List&lt;ContentsResponse&gt;</returns>
        ApiResponse<List<ContentsResponse>> RepoGetContentsListWithHttpInfo (string owner, string repo, string _ref = default(string));
        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns></returns>
        void RepoGetEditorConfig (string owner, string repo, string filepath);

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoGetEditorConfigWithHttpInfo (string owner, string repo, string filepath);
        /// <summary>
        /// Get a Git hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>GitHook</returns>
        GitHook RepoGetGitHook (string owner, string repo, string id);

        /// <summary>
        /// Get a Git hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of GitHook</returns>
        ApiResponse<GitHook> RepoGetGitHookWithHttpInfo (string owner, string repo, string id);
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Hook</returns>
        Hook RepoGetHook (string owner, string repo, long id);

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of Hook</returns>
        ApiResponse<Hook> RepoGetHookWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get a repository&#39;s key by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>DeployKey</returns>
        DeployKey RepoGetKey (string owner, string repo, long id);

        /// <summary>
        /// Get a repository&#39;s key by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>ApiResponse of DeployKey</returns>
        ApiResponse<DeployKey> RepoGetKeyWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get languages and number of bytes of code written
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        Dictionary<string, long> RepoGetLanguages (string owner, string repo);

        /// <summary>
        /// Get languages and number of bytes of code written
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        ApiResponse<Dictionary<string, long>> RepoGetLanguagesWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>PullRequest</returns>
        PullRequest RepoGetPullRequest (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of PullRequest</returns>
        ApiResponse<PullRequest> RepoGetPullRequestWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>PullReview</returns>
        PullReview RepoGetPullReview (string owner, string repo, long index, long id);

        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of PullReview</returns>
        ApiResponse<PullReview> RepoGetPullReviewWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>List&lt;PullReviewComment&gt;</returns>
        List<PullReviewComment> RepoGetPullReviewComments (string owner, string repo, long index, long id);

        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of List&lt;PullReviewComment&gt;</returns>
        ApiResponse<List<PullReviewComment>> RepoGetPullReviewCommentsWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Get a file from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns></returns>
        void RepoGetRawFile (string owner, string repo, string filepath);

        /// <summary>
        /// Get a file from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoGetRawFileWithHttpInfo (string owner, string repo, string filepath);
        /// <summary>
        /// Get a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Release</returns>
        Release RepoGetRelease (string owner, string repo, long id);

        /// <summary>
        /// Get a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> RepoGetReleaseWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Attachment</returns>
        Attachment RepoGetReleaseAttachment (string owner, string repo, long id, long attachmentId);

        /// <summary>
        /// Get a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>ApiResponse of Attachment</returns>
        ApiResponse<Attachment> RepoGetReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId);
        /// <summary>
        /// Get a single commit from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Commit</returns>
        Commit RepoGetSingleCommit (string owner, string repo, string sha);

        /// <summary>
        /// Get a single commit from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>ApiResponse of Commit</returns>
        ApiResponse<Commit> RepoGetSingleCommitWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;Reference&gt;</returns>
        List<Reference> RepoListAllGitRefs (string owner, string repo);

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        ApiResponse<List<Reference>> RepoListAllGitRefsWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;BranchProtection&gt;</returns>
        List<BranchProtection> RepoListBranchProtection (string owner, string repo);

        /// <summary>
        /// List branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;BranchProtection&gt;</returns>
        ApiResponse<List<BranchProtection>> RepoListBranchProtectionWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a repository&#39;s branches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;Branch&gt;</returns>
        List<Branch> RepoListBranches (string owner, string repo);

        /// <summary>
        /// List a repository&#39;s branches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        ApiResponse<List<Branch>> RepoListBranchesWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a repository&#39;s collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> RepoListCollaborators (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> RepoListCollaboratorsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List the Git hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;GitHook&gt;</returns>
        List<GitHook> RepoListGitHooks (string owner, string repo);

        /// <summary>
        /// List the Git hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;GitHook&gt;</returns>
        ApiResponse<List<GitHook>> RepoListGitHooksWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>List&lt;Reference&gt;</returns>
        List<Reference> RepoListGitRefs (string owner, string repo, string _ref);

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        ApiResponse<List<Reference>> RepoListGitRefsWithHttpInfo (string owner, string repo, string _ref);
        /// <summary>
        /// List the hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Hook&gt;</returns>
        List<Hook> RepoListHooks (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List the hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        ApiResponse<List<Hook>> RepoListHooksWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repository&#39;s keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;DeployKey&gt;</returns>
        List<DeployKey> RepoListKeys (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;DeployKey&gt;</returns>
        ApiResponse<List<DeployKey>> RepoListKeysWithHttpInfo (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s pull requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;PullRequest&gt;</returns>
        List<PullRequest> RepoListPullRequests (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s pull requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;PullRequest&gt;</returns>
        ApiResponse<List<PullRequest>> RepoListPullRequestsWithHttpInfo (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int));
        /// <summary>
        /// List all reviews for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;PullReview&gt;</returns>
        List<PullReview> RepoListPullReviews (string owner, string repo, long index, int page = default(int), int limit = default(int));

        /// <summary>
        /// List all reviews for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;PullReview&gt;</returns>
        ApiResponse<List<PullReview>> RepoListPullReviewsWithHttpInfo (string owner, string repo, long index, int page = default(int), int limit = default(int));
        /// <summary>
        /// List release&#39;s attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>List&lt;Attachment&gt;</returns>
        List<Attachment> RepoListReleaseAttachments (string owner, string repo, long id);

        /// <summary>
        /// List release&#39;s attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>ApiResponse of List&lt;Attachment&gt;</returns>
        ApiResponse<List<Attachment>> RepoListReleaseAttachmentsWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// List a repo&#39;s releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Release&gt;</returns>
        List<Release> RepoListReleases (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Release&gt;</returns>
        ApiResponse<List<Release>> RepoListReleasesWithHttpInfo (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s stargazers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> RepoListStargazers (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s stargazers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> RepoListStargazersWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Get a commit&#39;s statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Status&gt;</returns>
        List<Status> RepoListStatuses (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Get a commit&#39;s statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Status&gt;</returns>
        ApiResponse<List<Status>> RepoListStatusesWithHttpInfo (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s watchers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> RepoListSubscribers (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s watchers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> RepoListSubscribersWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repository&#39;s tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        List<Tag> RepoListTags (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        ApiResponse<List<Tag>> RepoListTagsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Get list of topics that a repository has
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>TopicName</returns>
        TopicName RepoListTopics (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// Get list of topics that a repository has
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of TopicName</returns>
        ApiResponse<TopicName> RepoListTopicsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Merge a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RepoMergePullRequest (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption));

        /// <summary>
        /// Merge a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoMergePullRequestWithHttpInfo (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption));
        /// <summary>
        /// Migrate a remote git repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        Repository RepoMigrate (MigrateRepoForm body = default(MigrateRepoForm));

        /// <summary>
        /// Migrate a remote git repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> RepoMigrateWithHttpInfo (MigrateRepoForm body = default(MigrateRepoForm));
        /// <summary>
        /// Sync a mirrored repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns></returns>
        void RepoMirrorSync (string owner, string repo);

        /// <summary>
        /// Sync a mirrored repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoMirrorSyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Check if a pull request has been merged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns></returns>
        void RepoPullRequestIsMerged (string owner, string repo, long index);

        /// <summary>
        /// Check if a pull request has been merged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoPullRequestIsMergedWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Search for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>SearchResults</returns>
        SearchResults RepoSearch (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Search for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of SearchResults</returns>
        ApiResponse<SearchResults> RepoSearchWithHttpInfo (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get signing-key.gpg for given repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>string</returns>
        string RepoSigningKey (string owner, string repo);

        /// <summary>
        /// Get signing-key.gpg for given repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RepoSigningKeyWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Submit a pending review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>PullReview</returns>
        PullReview RepoSubmitPullReview (string owner, string repo, long index, long id, SubmitPullReviewOptions body);

        /// <summary>
        /// Submit a pending review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PullReview</returns>
        ApiResponse<PullReview> RepoSubmitPullReviewWithHttpInfo (string owner, string repo, long index, long id, SubmitPullReviewOptions body);
        /// <summary>
        /// Test a push webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns></returns>
        void RepoTestHook (string owner, string repo, long id);

        /// <summary>
        /// Test a push webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoTestHookWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// List a repo&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        List<TrackedTime> RepoTrackedTimes (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        ApiResponse<List<TrackedTime>> RepoTrackedTimesWithHttpInfo (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// Transfer a repo ownership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Repository</returns>
        Repository RepoTransfer (string owner, string repo, TransferRepoOption body);

        /// <summary>
        /// Transfer a repo ownership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> RepoTransferWithHttpInfo (string owner, string repo, TransferRepoOption body);
        /// <summary>
        /// Update a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>FileResponse</returns>
        FileResponse RepoUpdateFile (string owner, string repo, string filepath, UpdateFileOptions body);

        /// <summary>
        /// Update a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileResponse</returns>
        ApiResponse<FileResponse> RepoUpdateFileWithHttpInfo (string owner, string repo, string filepath, UpdateFileOptions body);
        /// <summary>
        /// Replace list of topics for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void RepoUpdateTopics (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions));

        /// <summary>
        /// Replace list of topics for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RepoUpdateTopicsWithHttpInfo (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions));
        /// <summary>
        /// search topics via keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;TopicResponse&gt;</returns>
        List<TopicResponse> TopicSearch (string q, int page = default(int), int limit = default(int));

        /// <summary>
        /// search topics via keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;TopicResponse&gt;</returns>
        ApiResponse<List<TopicResponse>> TopicSearchWithHttpInfo (string q, int page = default(int), int limit = default(int));
        /// <summary>
        /// Check if the current user is watching a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>WatchInfo</returns>
        WatchInfo UserCurrentCheckSubscription (string owner, string repo);

        /// <summary>
        /// Check if the current user is watching a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of WatchInfo</returns>
        ApiResponse<WatchInfo> UserCurrentCheckSubscriptionWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Unwatch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns></returns>
        void UserCurrentDeleteSubscription (string owner, string repo);

        /// <summary>
        /// Unwatch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserCurrentDeleteSubscriptionWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Watch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>WatchInfo</returns>
        WatchInfo UserCurrentPutSubscription (string owner, string repo);

        /// <summary>
        /// Watch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of WatchInfo</returns>
        ApiResponse<WatchInfo> UserCurrentPutSubscriptionWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        List<TrackedTime> UserTrackedTimes (string owner, string repo, string user);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        ApiResponse<List<TrackedTime>> UserTrackedTimesWithHttpInfo (string owner, string repo, string user);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> CreateCurrentUserRepoAsync (CreateRepoOption body = default(CreateRepoOption));

        /// <summary>
        /// Create a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> CreateCurrentUserRepoAsyncWithHttpInfo (CreateRepoOption body = default(CreateRepoOption));
        /// <summary>
        /// Fork a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> CreateForkAsync (string owner, string repo, CreateForkOption body = default(CreateForkOption));

        /// <summary>
        /// Fork a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> CreateForkAsyncWithHttpInfo (string owner, string repo, CreateForkOption body = default(CreateForkOption));
        /// <summary>
        /// Gets the blob of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>Task of GitBlobResponse</returns>
        System.Threading.Tasks.Task<GitBlobResponse> GetBlobAsync (string owner, string repo, string sha);

        /// <summary>
        /// Gets the blob of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>Task of ApiResponse (GitBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GitBlobResponse>> GetBlobAsyncWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>Task of AnnotatedTag</returns>
        System.Threading.Tasks.Task<AnnotatedTag> GetTagAsync (string owner, string repo, string sha);

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>Task of ApiResponse (AnnotatedTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnotatedTag>> GetTagAsyncWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Gets the tree of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>Task of GitTreeResponse</returns>
        System.Threading.Tasks.Task<GitTreeResponse> GetTreeAsync (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int));

        /// <summary>
        /// Gets the tree of a repository.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>Task of ApiResponse (GitTreeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GitTreeResponse>> GetTreeAsyncWithHttpInfo (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int));
        /// <summary>
        /// List a repository&#39;s forks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Repository>> ListForksAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s forks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Repository>>> ListForksAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Add a collaborator to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoAddCollaboratorAsync (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption));

        /// <summary>
        /// Add a collaborator to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoAddCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption));
        /// <summary>
        /// Add a topic to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoAddTopcAsync (string owner, string repo, string topic);

        /// <summary>
        /// Add a topic to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoAddTopcAsyncWithHttpInfo (string owner, string repo, string topic);
        /// <summary>
        /// Check if a user is a collaborator of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoCheckCollaboratorAsync (string owner, string repo, string collaborator);

        /// <summary>
        /// Check if a user is a collaborator of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoCheckCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator);
        /// <summary>
        /// Create a branch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> RepoCreateBranchAsync (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption));

        /// <summary>
        /// Create a branch
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> RepoCreateBranchAsyncWithHttpInfo (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption));
        /// <summary>
        /// Create a branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BranchProtection</returns>
        System.Threading.Tasks.Task<BranchProtection> RepoCreateBranchProtectionAsync (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption));

        /// <summary>
        /// Create a branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoCreateBranchProtectionAsyncWithHttpInfo (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption));
        /// <summary>
        /// Create a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> RepoCreateFileAsync (string owner, string repo, string filepath, CreateFileOptions body);

        /// <summary>
        /// Create a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> RepoCreateFileAsyncWithHttpInfo (string owner, string repo, string filepath, CreateFileOptions body);
        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> RepoCreateHookAsync (string owner, string repo, CreateHookOption body = default(CreateHookOption));

        /// <summary>
        /// Create a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> RepoCreateHookAsyncWithHttpInfo (string owner, string repo, CreateHookOption body = default(CreateHookOption));
        /// <summary>
        /// Add a key to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DeployKey</returns>
        System.Threading.Tasks.Task<DeployKey> RepoCreateKeyAsync (string owner, string repo, CreateKeyOption body = default(CreateKeyOption));

        /// <summary>
        /// Add a key to a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DeployKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeployKey>> RepoCreateKeyAsyncWithHttpInfo (string owner, string repo, CreateKeyOption body = default(CreateKeyOption));
        /// <summary>
        /// Create a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PullRequest</returns>
        System.Threading.Tasks.Task<PullRequest> RepoCreatePullRequestAsync (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption));

        /// <summary>
        /// Create a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoCreatePullRequestAsyncWithHttpInfo (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption));
        /// <summary>
        /// Create a review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>Task of PullReview</returns>
        System.Threading.Tasks.Task<PullReview> RepoCreatePullReviewAsync (string owner, string repo, long index, CreatePullReviewOptions body);

        /// <summary>
        /// Create a review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoCreatePullReviewAsyncWithHttpInfo (string owner, string repo, long index, CreatePullReviewOptions body);
        /// <summary>
        /// Create a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> RepoCreateReleaseAsync (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption));

        /// <summary>
        /// Create a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> RepoCreateReleaseAsyncWithHttpInfo (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption));
        /// <summary>
        /// Create a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Task of Attachment</returns>
        System.Threading.Tasks.Task<Attachment> RepoCreateReleaseAttachmentAsync (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string));

        /// <summary>
        /// Create a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoCreateReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string));
        /// <summary>
        /// Create a commit status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> RepoCreateStatusAsync (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption));

        /// <summary>
        /// Create a commit status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> RepoCreateStatusAsyncWithHttpInfo (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption));
        /// <summary>
        /// Delete a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteAsync (string owner, string repo);

        /// <summary>
        /// Delete a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Delete a specific branch from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteBranchAsync (string owner, string repo, string branch);

        /// <summary>
        /// Delete a specific branch from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteBranchAsyncWithHttpInfo (string owner, string repo, string branch);
        /// <summary>
        /// Delete a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteBranchProtectionAsync (string owner, string repo, string name);

        /// <summary>
        /// Delete a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name);
        /// <summary>
        /// Delete a collaborator from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteCollaboratorAsync (string owner, string repo, string collaborator);

        /// <summary>
        /// Delete a collaborator from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator);
        /// <summary>
        /// Delete a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of FileDeleteResponse</returns>
        System.Threading.Tasks.Task<FileDeleteResponse> RepoDeleteFileAsync (string owner, string repo, string filepath, DeleteFileOptions body);

        /// <summary>
        /// Delete a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDeleteResponse>> RepoDeleteFileAsyncWithHttpInfo (string owner, string repo, string filepath, DeleteFileOptions body);
        /// <summary>
        /// Delete a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteGitHookAsync (string owner, string repo, string id);

        /// <summary>
        /// Delete a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteGitHookAsyncWithHttpInfo (string owner, string repo, string id);
        /// <summary>
        /// Delete a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteHookAsync (string owner, string repo, long id);

        /// <summary>
        /// Delete a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteHookAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a key from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteKeyAsync (string owner, string repo, long id);

        /// <summary>
        /// Delete a key from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteKeyAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a specific review from a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeletePullReviewAsync (string owner, string repo, long index, long id);

        /// <summary>
        /// Delete a specific review from a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeletePullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Delete a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteReleaseAsync (string owner, string repo, long id);

        /// <summary>
        /// Delete a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteReleaseAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Delete a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId);

        /// <summary>
        /// Delete a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId);
        /// <summary>
        /// Delete a topic from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoDeleteTopicAsync (string owner, string repo, string topic);

        /// <summary>
        /// Delete a topic from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteTopicAsyncWithHttpInfo (string owner, string repo, string topic);
        /// <summary>
        /// Get a pull request diff
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RepoDownloadPullDiffAsync (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request diff
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RepoDownloadPullDiffAsyncWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Get a pull request patch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RepoDownloadPullPatchAsync (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request patch file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RepoDownloadPullPatchAsyncWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> RepoEditAsync (string owner, string repo, EditRepoOption body = default(EditRepoOption));

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> RepoEditAsyncWithHttpInfo (string owner, string repo, EditRepoOption body = default(EditRepoOption));
        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BranchProtection</returns>
        System.Threading.Tasks.Task<BranchProtection> RepoEditBranchProtectionAsync (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption));

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoEditBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption));
        /// <summary>
        /// Edit a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GitHook</returns>
        System.Threading.Tasks.Task<GitHook> RepoEditGitHookAsync (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption));

        /// <summary>
        /// Edit a Git hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GitHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<GitHook>> RepoEditGitHookAsyncWithHttpInfo (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption));
        /// <summary>
        /// Edit a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> RepoEditHookAsync (string owner, string repo, long id, EditHookOption body = default(EditHookOption));

        /// <summary>
        /// Edit a hook in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> RepoEditHookAsyncWithHttpInfo (string owner, string repo, long id, EditHookOption body = default(EditHookOption));
        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PullRequest</returns>
        System.Threading.Tasks.Task<PullRequest> RepoEditPullRequestAsync (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption));

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoEditPullRequestAsyncWithHttpInfo (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption));
        /// <summary>
        /// Update a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> RepoEditReleaseAsync (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption));

        /// <summary>
        /// Update a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> RepoEditReleaseAsyncWithHttpInfo (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption));
        /// <summary>
        /// Edit a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Attachment</returns>
        System.Threading.Tasks.Task<Attachment> RepoEditReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions));

        /// <summary>
        /// Edit a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoEditReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions));
        /// <summary>
        /// Get a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> RepoGetAsync (string owner, string repo);

        /// <summary>
        /// Get a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> RepoGetAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get a list of all commits from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Commit&gt;</returns>
        System.Threading.Tasks.Task<List<Commit>> RepoGetAllCommitsAsync (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Get a list of all commits from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Commit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Commit>>> RepoGetAllCommitsAsyncWithHttpInfo (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get an archive of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoGetArchiveAsync (string owner, string repo, string archive);

        /// <summary>
        /// Get an archive of a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetArchiveAsyncWithHttpInfo (string owner, string repo, string archive);
        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Task of Branch</returns>
        System.Threading.Tasks.Task<Branch> RepoGetBranchAsync (string owner, string repo, string branch);

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branch>> RepoGetBranchAsyncWithHttpInfo (string owner, string repo, string branch);
        /// <summary>
        /// Get a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of BranchProtection</returns>
        System.Threading.Tasks.Task<BranchProtection> RepoGetBranchProtectionAsync (string owner, string repo, string name);

        /// <summary>
        /// Get a specific branch protection for the repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoGetBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name);
        /// <summary>
        /// Get a repository by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> RepoGetByIDAsync (long id);

        /// <summary>
        /// Get a repository by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> RepoGetByIDAsyncWithHttpInfo (long id);
        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> RepoGetCombinedStatusByRefAsync (string owner, string repo, string _ref, int page = default(int));

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> RepoGetCombinedStatusByRefAsyncWithHttpInfo (string owner, string repo, string _ref, int page = default(int));
        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ContentsResponse</returns>
        System.Threading.Tasks.Task<ContentsResponse> RepoGetContentsAsync (string owner, string repo, string filepath, string _ref = default(string));

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ApiResponse (ContentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContentsResponse>> RepoGetContentsAsyncWithHttpInfo (string owner, string repo, string filepath, string _ref = default(string));
        /// <summary>
        /// Gets the metadata of all the entries of the root dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of List&lt;ContentsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ContentsResponse>> RepoGetContentsListAsync (string owner, string repo, string _ref = default(string));

        /// <summary>
        /// Gets the metadata of all the entries of the root dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ContentsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContentsResponse>>> RepoGetContentsListAsyncWithHttpInfo (string owner, string repo, string _ref = default(string));
        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoGetEditorConfigAsync (string owner, string repo, string filepath);

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetEditorConfigAsyncWithHttpInfo (string owner, string repo, string filepath);
        /// <summary>
        /// Get a Git hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of GitHook</returns>
        System.Threading.Tasks.Task<GitHook> RepoGetGitHookAsync (string owner, string repo, string id);

        /// <summary>
        /// Get a Git hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse (GitHook)</returns>
        System.Threading.Tasks.Task<ApiResponse<GitHook>> RepoGetGitHookAsyncWithHttpInfo (string owner, string repo, string id);
        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of Hook</returns>
        System.Threading.Tasks.Task<Hook> RepoGetHookAsync (string owner, string repo, long id);

        /// <summary>
        /// Get a hook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Hook>> RepoGetHookAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get a repository&#39;s key by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>Task of DeployKey</returns>
        System.Threading.Tasks.Task<DeployKey> RepoGetKeyAsync (string owner, string repo, long id);

        /// <summary>
        /// Get a repository&#39;s key by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>Task of ApiResponse (DeployKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeployKey>> RepoGetKeyAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get languages and number of bytes of code written
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, long>> RepoGetLanguagesAsync (string owner, string repo);

        /// <summary>
        /// Get languages and number of bytes of code written
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long>>> RepoGetLanguagesAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of PullRequest</returns>
        System.Threading.Tasks.Task<PullRequest> RepoGetPullRequestAsync (string owner, string repo, long index);

        /// <summary>
        /// Get a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoGetPullRequestAsyncWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of PullReview</returns>
        System.Threading.Tasks.Task<PullReview> RepoGetPullReviewAsync (string owner, string repo, long index, long id);

        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoGetPullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of List&lt;PullReviewComment&gt;</returns>
        System.Threading.Tasks.Task<List<PullReviewComment>> RepoGetPullReviewCommentsAsync (string owner, string repo, long index, long id);

        /// <summary>
        /// Get a specific review for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse (List&lt;PullReviewComment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PullReviewComment>>> RepoGetPullReviewCommentsAsyncWithHttpInfo (string owner, string repo, long index, long id);
        /// <summary>
        /// Get a file from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoGetRawFileAsync (string owner, string repo, string filepath);

        /// <summary>
        /// Get a file from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetRawFileAsyncWithHttpInfo (string owner, string repo, string filepath);
        /// <summary>
        /// Get a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> RepoGetReleaseAsync (string owner, string repo, long id);

        /// <summary>
        /// Get a release
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> RepoGetReleaseAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// Get a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Task of Attachment</returns>
        System.Threading.Tasks.Task<Attachment> RepoGetReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId);

        /// <summary>
        /// Get a release attachment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoGetReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId);
        /// <summary>
        /// Get a single commit from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Task of Commit</returns>
        System.Threading.Tasks.Task<Commit> RepoGetSingleCommitAsync (string owner, string repo, string sha);

        /// <summary>
        /// Get a single commit from a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Task of ApiResponse (Commit)</returns>
        System.Threading.Tasks.Task<ApiResponse<Commit>> RepoGetSingleCommitAsyncWithHttpInfo (string owner, string repo, string sha);
        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        System.Threading.Tasks.Task<List<Reference>> RepoListAllGitRefsAsync (string owner, string repo);

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Reference>>> RepoListAllGitRefsAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;BranchProtection&gt;</returns>
        System.Threading.Tasks.Task<List<BranchProtection>> RepoListBranchProtectionAsync (string owner, string repo);

        /// <summary>
        /// List branch protections for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;BranchProtection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BranchProtection>>> RepoListBranchProtectionAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a repository&#39;s branches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        System.Threading.Tasks.Task<List<Branch>> RepoListBranchesAsync (string owner, string repo);

        /// <summary>
        /// List a repository&#39;s branches
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Branch>>> RepoListBranchesAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a repository&#39;s collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> RepoListCollaboratorsAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s collaborators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListCollaboratorsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List the Git hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;GitHook&gt;</returns>
        System.Threading.Tasks.Task<List<GitHook>> RepoListGitHooksAsync (string owner, string repo);

        /// <summary>
        /// List the Git hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;GitHook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GitHook>>> RepoListGitHooksAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        System.Threading.Tasks.Task<List<Reference>> RepoListGitRefsAsync (string owner, string repo, string _ref);

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Reference>>> RepoListGitRefsAsyncWithHttpInfo (string owner, string repo, string _ref);
        /// <summary>
        /// List the hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        System.Threading.Tasks.Task<List<Hook>> RepoListHooksAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List the hooks in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Hook>>> RepoListHooksAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repository&#39;s keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;DeployKey&gt;</returns>
        System.Threading.Tasks.Task<List<DeployKey>> RepoListKeysAsync (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeployKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeployKey>>> RepoListKeysAsyncWithHttpInfo (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s pull requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;PullRequest&gt;</returns>
        System.Threading.Tasks.Task<List<PullRequest>> RepoListPullRequestsAsync (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s pull requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PullRequest&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PullRequest>>> RepoListPullRequestsAsyncWithHttpInfo (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int));
        /// <summary>
        /// List all reviews for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;PullReview&gt;</returns>
        System.Threading.Tasks.Task<List<PullReview>> RepoListPullReviewsAsync (string owner, string repo, long index, int page = default(int), int limit = default(int));

        /// <summary>
        /// List all reviews for a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PullReview&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PullReview>>> RepoListPullReviewsAsyncWithHttpInfo (string owner, string repo, long index, int page = default(int), int limit = default(int));
        /// <summary>
        /// List release&#39;s attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>Task of List&lt;Attachment&gt;</returns>
        System.Threading.Tasks.Task<List<Attachment>> RepoListReleaseAttachmentsAsync (string owner, string repo, long id);

        /// <summary>
        /// List release&#39;s attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>Task of ApiResponse (List&lt;Attachment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Attachment>>> RepoListReleaseAttachmentsAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// List a repo&#39;s releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Release&gt;</returns>
        System.Threading.Tasks.Task<List<Release>> RepoListReleasesAsync (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s releases
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Release&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Release>>> RepoListReleasesAsyncWithHttpInfo (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s stargazers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> RepoListStargazersAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s stargazers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListStargazersAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Get a commit&#39;s statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Status&gt;</returns>
        System.Threading.Tasks.Task<List<Status>> RepoListStatusesAsync (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Get a commit&#39;s statuses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Status&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Status>>> RepoListStatusesAsyncWithHttpInfo (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repo&#39;s watchers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> RepoListSubscribersAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s watchers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListSubscribersAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// List a repository&#39;s tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        System.Threading.Tasks.Task<List<Tag>> RepoListTagsAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repository&#39;s tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tag>>> RepoListTagsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Get list of topics that a repository has
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of TopicName</returns>
        System.Threading.Tasks.Task<TopicName> RepoListTopicsAsync (string owner, string repo, int page = default(int), int limit = default(int));

        /// <summary>
        /// Get list of topics that a repository has
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (TopicName)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopicName>> RepoListTopicsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int));
        /// <summary>
        /// Merge a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoMergePullRequestAsync (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption));

        /// <summary>
        /// Merge a pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoMergePullRequestAsyncWithHttpInfo (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption));
        /// <summary>
        /// Migrate a remote git repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> RepoMigrateAsync (MigrateRepoForm body = default(MigrateRepoForm));

        /// <summary>
        /// Migrate a remote git repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> RepoMigrateAsyncWithHttpInfo (MigrateRepoForm body = default(MigrateRepoForm));
        /// <summary>
        /// Sync a mirrored repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoMirrorSyncAsync (string owner, string repo);

        /// <summary>
        /// Sync a mirrored repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoMirrorSyncAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Check if a pull request has been merged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoPullRequestIsMergedAsync (string owner, string repo, long index);

        /// <summary>
        /// Check if a pull request has been merged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoPullRequestIsMergedAsyncWithHttpInfo (string owner, string repo, long index);
        /// <summary>
        /// Search for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of SearchResults</returns>
        System.Threading.Tasks.Task<SearchResults> RepoSearchAsync (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int));

        /// <summary>
        /// Search for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (SearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResults>> RepoSearchAsyncWithHttpInfo (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int));
        /// <summary>
        /// Get signing-key.gpg for given repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RepoSigningKeyAsync (string owner, string repo);

        /// <summary>
        /// Get signing-key.gpg for given repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RepoSigningKeyAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Submit a pending review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>Task of PullReview</returns>
        System.Threading.Tasks.Task<PullReview> RepoSubmitPullReviewAsync (string owner, string repo, long index, long id, SubmitPullReviewOptions body);

        /// <summary>
        /// Submit a pending review to an pull request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoSubmitPullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id, SubmitPullReviewOptions body);
        /// <summary>
        /// Test a push webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoTestHookAsync (string owner, string repo, long id);

        /// <summary>
        /// Test a push webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoTestHookAsyncWithHttpInfo (string owner, string repo, long id);
        /// <summary>
        /// List a repo&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedTime>> RepoTrackedTimesAsync (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));

        /// <summary>
        /// List a repo&#39;s tracked times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> RepoTrackedTimesAsyncWithHttpInfo (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int));
        /// <summary>
        /// Transfer a repo ownership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> RepoTransferAsync (string owner, string repo, TransferRepoOption body);

        /// <summary>
        /// Transfer a repo ownership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> RepoTransferAsyncWithHttpInfo (string owner, string repo, TransferRepoOption body);
        /// <summary>
        /// Update a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>Task of FileResponse</returns>
        System.Threading.Tasks.Task<FileResponse> RepoUpdateFileAsync (string owner, string repo, string filepath, UpdateFileOptions body);

        /// <summary>
        /// Update a file in a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileResponse>> RepoUpdateFileAsyncWithHttpInfo (string owner, string repo, string filepath, UpdateFileOptions body);
        /// <summary>
        /// Replace list of topics for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RepoUpdateTopicsAsync (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions));

        /// <summary>
        /// Replace list of topics for a repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RepoUpdateTopicsAsyncWithHttpInfo (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions));
        /// <summary>
        /// search topics via keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;TopicResponse&gt;</returns>
        System.Threading.Tasks.Task<List<TopicResponse>> TopicSearchAsync (string q, int page = default(int), int limit = default(int));

        /// <summary>
        /// search topics via keyword
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopicResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TopicResponse>>> TopicSearchAsyncWithHttpInfo (string q, int page = default(int), int limit = default(int));
        /// <summary>
        /// Check if the current user is watching a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of WatchInfo</returns>
        System.Threading.Tasks.Task<WatchInfo> UserCurrentCheckSubscriptionAsync (string owner, string repo);

        /// <summary>
        /// Check if the current user is watching a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (WatchInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchInfo>> UserCurrentCheckSubscriptionAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Unwatch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteSubscriptionAsync (string owner, string repo);

        /// <summary>
        /// Unwatch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteSubscriptionAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// Watch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of WatchInfo</returns>
        System.Threading.Tasks.Task<WatchInfo> UserCurrentPutSubscriptionAsync (string owner, string repo);

        /// <summary>
        /// Watch a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (WatchInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<WatchInfo>> UserCurrentPutSubscriptionAsyncWithHttpInfo (string owner, string repo);
        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedTime>> UserTrackedTimesAsync (string owner, string repo, string user);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserTrackedTimesAsyncWithHttpInfo (string owner, string repo, string user);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RepositoryApi : IRepositoryApi
    {
        private Gitea.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepositoryApi(String basePath)
        {
            this.Configuration = new Gitea.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class
        /// </summary>
        /// <returns></returns>
        public RepositoryApi()
        {
            this.Configuration = Gitea.Client.Configuration.Default;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RepositoryApi(Gitea.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Gitea.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        public Repository CreateCurrentUserRepo (CreateRepoOption body = default(CreateRepoOption))
        {
             ApiResponse<Repository> localVarResponse = CreateCurrentUserRepoWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> CreateCurrentUserRepoWithHttpInfo (CreateRepoOption body = default(CreateRepoOption))
        {

            var localVarPath = "./user/repos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> CreateCurrentUserRepoAsync (CreateRepoOption body = default(CreateRepoOption))
        {
             ApiResponse<Repository> localVarResponse = await CreateCurrentUserRepoAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> CreateCurrentUserRepoAsyncWithHttpInfo (CreateRepoOption body = default(CreateRepoOption))
        {

            var localVarPath = "./user/repos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Fork a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        public Repository CreateFork (string owner, string repo, CreateForkOption body = default(CreateForkOption))
        {
             ApiResponse<Repository> localVarResponse = CreateForkWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fork a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> CreateForkWithHttpInfo (string owner, string repo, CreateForkOption body = default(CreateForkOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->CreateFork");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->CreateFork");

            var localVarPath = "./repos/{owner}/{repo}/forks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Fork a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> CreateForkAsync (string owner, string repo, CreateForkOption body = default(CreateForkOption))
        {
             ApiResponse<Repository> localVarResponse = await CreateForkAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fork a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to fork</param>
        /// <param name="repo">name of the repo to fork</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> CreateForkAsyncWithHttpInfo (string owner, string repo, CreateForkOption body = default(CreateForkOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->CreateFork");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->CreateFork");

            var localVarPath = "./repos/{owner}/{repo}/forks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFork", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Gets the blob of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>GitBlobResponse</returns>
        public GitBlobResponse GetBlob (string owner, string repo, string sha)
        {
             ApiResponse<GitBlobResponse> localVarResponse = GetBlobWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the blob of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>ApiResponse of GitBlobResponse</returns>
        public ApiResponse<GitBlobResponse> GetBlobWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetBlob");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetBlob");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetBlob");

            var localVarPath = "./repos/{owner}/{repo}/git/blobs/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitBlobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitBlobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitBlobResponse)));
        }

        /// <summary>
        /// Gets the blob of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>Task of GitBlobResponse</returns>
        public async System.Threading.Tasks.Task<GitBlobResponse> GetBlobAsync (string owner, string repo, string sha)
        {
             ApiResponse<GitBlobResponse> localVarResponse = await GetBlobAsyncWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the blob of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <returns>Task of ApiResponse (GitBlobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GitBlobResponse>> GetBlobAsyncWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetBlob");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetBlob");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetBlob");

            var localVarPath = "./repos/{owner}/{repo}/git/blobs/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitBlobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitBlobResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitBlobResponse)));
        }

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags) 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>AnnotatedTag</returns>
        public AnnotatedTag GetTag (string owner, string repo, string sha)
        {
             ApiResponse<AnnotatedTag> localVarResponse = GetTagWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags) 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>ApiResponse of AnnotatedTag</returns>
        public ApiResponse<AnnotatedTag> GetTagWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetTag");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetTag");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetTag");

            var localVarPath = "./repos/{owner}/{repo}/git/tags/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotatedTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnotatedTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotatedTag)));
        }

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags) 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>Task of AnnotatedTag</returns>
        public async System.Threading.Tasks.Task<AnnotatedTag> GetTagAsync (string owner, string repo, string sha)
        {
             ApiResponse<AnnotatedTag> localVarResponse = await GetTagAsyncWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the tag object of an annotated tag (not lightweight tags) 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the tag. The Git tags API only supports annotated tag objects, not lightweight tags.</param>
        /// <returns>Task of ApiResponse (AnnotatedTag)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnotatedTag>> GetTagAsyncWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetTag");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetTag");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetTag");

            var localVarPath = "./repos/{owner}/{repo}/git/tags/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnnotatedTag>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AnnotatedTag) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnnotatedTag)));
        }

        /// <summary>
        /// Gets the tree of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>GitTreeResponse</returns>
        public GitTreeResponse GetTree (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int))
        {
             ApiResponse<GitTreeResponse> localVarResponse = GetTreeWithHttpInfo(owner, repo, sha, recursive, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the tree of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>ApiResponse of GitTreeResponse</returns>
        public ApiResponse<GitTreeResponse> GetTreeWithHttpInfo (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetTree");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetTree");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetTree");

            var localVarPath = "./repos/{owner}/{repo}/git/trees/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitTreeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitTreeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitTreeResponse)));
        }

        /// <summary>
        /// Gets the tree of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>Task of GitTreeResponse</returns>
        public async System.Threading.Tasks.Task<GitTreeResponse> GetTreeAsync (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int))
        {
             ApiResponse<GitTreeResponse> localVarResponse = await GetTreeAsyncWithHttpInfo(owner, repo, sha, recursive, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the tree of a repository. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="recursive">show all directories and files (optional)</param>
        /// <param name="page">page number; the &#39;truncated&#39; field in the response will be true if there are still more items after this page, false if the last page (optional)</param>
        /// <param name="perPage">number of items per page (optional)</param>
        /// <returns>Task of ApiResponse (GitTreeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GitTreeResponse>> GetTreeAsyncWithHttpInfo (string owner, string repo, string sha, bool recursive = default(bool), int page = default(int), int perPage = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->GetTree");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->GetTree");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->GetTree");

            var localVarPath = "./repos/{owner}/{repo}/git/trees/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitTreeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitTreeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitTreeResponse)));
        }

        /// <summary>
        /// List a repository&#39;s forks 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Repository> ListForks (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Repository>> localVarResponse = ListForksWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repository&#39;s forks 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Repository>> ListForksWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->ListForks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->ListForks");

            var localVarPath = "./repos/{owner}/{repo}/forks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Repository>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Repository>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Repository>)));
        }

        /// <summary>
        /// List a repository&#39;s forks 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Repository>> ListForksAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Repository>> localVarResponse = await ListForksAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repository&#39;s forks 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Repository>>> ListForksAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->ListForks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->ListForks");

            var localVarPath = "./repos/{owner}/{repo}/forks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListForks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Repository>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Repository>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Repository>)));
        }

        /// <summary>
        /// Add a collaborator to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RepoAddCollaborator (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption))
        {
             RepoAddCollaboratorWithHttpInfo(owner, repo, collaborator, body);
        }

        /// <summary>
        /// Add a collaborator to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoAddCollaboratorWithHttpInfo (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoAddCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoAddCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoAddCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoAddCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a collaborator to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoAddCollaboratorAsync (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption))
        {
             await RepoAddCollaboratorAsyncWithHttpInfo(owner, repo, collaborator, body);

        }

        /// <summary>
        /// Add a collaborator to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to add</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoAddCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator, AddCollaboratorOption body = default(AddCollaboratorOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoAddCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoAddCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoAddCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoAddCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a topic to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns></returns>
        public void RepoAddTopc (string owner, string repo, string topic)
        {
             RepoAddTopcWithHttpInfo(owner, repo, topic);
        }

        /// <summary>
        /// Add a topic to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoAddTopcWithHttpInfo (string owner, string repo, string topic)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoAddTopc");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoAddTopc");
            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new ApiException(400, "Missing required parameter 'topic' when calling RepositoryApi->RepoAddTopc");

            var localVarPath = "./repos/{owner}/{repo}/topics/{topic}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (topic != null) localVarPathParams.Add("topic", this.Configuration.ApiClient.ParameterToString(topic)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoAddTopc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add a topic to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoAddTopcAsync (string owner, string repo, string topic)
        {
             await RepoAddTopcAsyncWithHttpInfo(owner, repo, topic);

        }

        /// <summary>
        /// Add a topic to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoAddTopcAsyncWithHttpInfo (string owner, string repo, string topic)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoAddTopc");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoAddTopc");
            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new ApiException(400, "Missing required parameter 'topic' when calling RepositoryApi->RepoAddTopc");

            var localVarPath = "./repos/{owner}/{repo}/topics/{topic}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (topic != null) localVarPathParams.Add("topic", this.Configuration.ApiClient.ParameterToString(topic)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoAddTopc", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if a user is a collaborator of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns></returns>
        public void RepoCheckCollaborator (string owner, string repo, string collaborator)
        {
             RepoCheckCollaboratorWithHttpInfo(owner, repo, collaborator);
        }

        /// <summary>
        /// Check if a user is a collaborator of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoCheckCollaboratorWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCheckCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCheckCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoCheckCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCheckCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if a user is a collaborator of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoCheckCollaboratorAsync (string owner, string repo, string collaborator)
        {
             await RepoCheckCollaboratorAsyncWithHttpInfo(owner, repo, collaborator);

        }

        /// <summary>
        /// Check if a user is a collaborator of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoCheckCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCheckCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCheckCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoCheckCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCheckCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a branch 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Branch</returns>
        public Branch RepoCreateBranch (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption))
        {
             ApiResponse<Branch> localVarResponse = RepoCreateBranchWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a branch 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Branch</returns>
        public ApiResponse<Branch> RepoCreateBranchWithHttpInfo (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// Create a branch 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> RepoCreateBranchAsync (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption))
        {
             ApiResponse<Branch> localVarResponse = await RepoCreateBranchAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a branch 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branch>> RepoCreateBranchAsyncWithHttpInfo (string owner, string repo, CreateBranchRepoOption body = default(CreateBranchRepoOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// Create a branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BranchProtection</returns>
        public BranchProtection RepoCreateBranchProtection (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption))
        {
             ApiResponse<BranchProtection> localVarResponse = RepoCreateBranchProtectionWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        public ApiResponse<BranchProtection> RepoCreateBranchProtectionWithHttpInfo (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Create a branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BranchProtection</returns>
        public async System.Threading.Tasks.Task<BranchProtection> RepoCreateBranchProtectionAsync (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption))
        {
             ApiResponse<BranchProtection> localVarResponse = await RepoCreateBranchProtectionAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoCreateBranchProtectionAsyncWithHttpInfo (string owner, string repo, CreateBranchProtectionOption body = default(CreateBranchProtectionOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Create a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>FileResponse</returns>
        public FileResponse RepoCreateFile (string owner, string repo, string filepath, CreateFileOptions body)
        {
             ApiResponse<FileResponse> localVarResponse = RepoCreateFileWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileResponse</returns>
        public ApiResponse<FileResponse> RepoCreateFileWithHttpInfo (string owner, string repo, string filepath, CreateFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoCreateFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponse)));
        }

        /// <summary>
        /// Create a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> RepoCreateFileAsync (string owner, string repo, string filepath, CreateFileOptions body)
        {
             ApiResponse<FileResponse> localVarResponse = await RepoCreateFileAsyncWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to create</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileResponse>> RepoCreateFileAsyncWithHttpInfo (string owner, string repo, string filepath, CreateFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoCreateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoCreateFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponse)));
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Hook</returns>
        public Hook RepoCreateHook (string owner, string repo, CreateHookOption body = default(CreateHookOption))
        {
             ApiResponse<Hook> localVarResponse = RepoCreateHookWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Hook</returns>
        public ApiResponse<Hook> RepoCreateHookWithHttpInfo (string owner, string repo, CreateHookOption body = default(CreateHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> RepoCreateHookAsync (string owner, string repo, CreateHookOption body = default(CreateHookOption))
        {
             ApiResponse<Hook> localVarResponse = await RepoCreateHookAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Hook>> RepoCreateHookAsyncWithHttpInfo (string owner, string repo, CreateHookOption body = default(CreateHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Add a key to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DeployKey</returns>
        public DeployKey RepoCreateKey (string owner, string repo, CreateKeyOption body = default(CreateKeyOption))
        {
             ApiResponse<DeployKey> localVarResponse = RepoCreateKeyWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a key to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DeployKey</returns>
        public ApiResponse<DeployKey> RepoCreateKeyWithHttpInfo (string owner, string repo, CreateKeyOption body = default(CreateKeyOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateKey");

            var localVarPath = "./repos/{owner}/{repo}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeployKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployKey)));
        }

        /// <summary>
        /// Add a key to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DeployKey</returns>
        public async System.Threading.Tasks.Task<DeployKey> RepoCreateKeyAsync (string owner, string repo, CreateKeyOption body = default(CreateKeyOption))
        {
             ApiResponse<DeployKey> localVarResponse = await RepoCreateKeyAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a key to a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DeployKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeployKey>> RepoCreateKeyAsyncWithHttpInfo (string owner, string repo, CreateKeyOption body = default(CreateKeyOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateKey");

            var localVarPath = "./repos/{owner}/{repo}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeployKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployKey)));
        }

        /// <summary>
        /// Create a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PullRequest</returns>
        public PullRequest RepoCreatePullRequest (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption))
        {
             ApiResponse<PullRequest> localVarResponse = RepoCreatePullRequestWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PullRequest</returns>
        public ApiResponse<PullRequest> RepoCreatePullRequestWithHttpInfo (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreatePullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreatePullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreatePullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Create a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PullRequest</returns>
        public async System.Threading.Tasks.Task<PullRequest> RepoCreatePullRequestAsync (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption))
        {
             ApiResponse<PullRequest> localVarResponse = await RepoCreatePullRequestAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoCreatePullRequestAsyncWithHttpInfo (string owner, string repo, CreatePullRequestOption body = default(CreatePullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreatePullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreatePullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreatePullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Create a review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>PullReview</returns>
        public PullReview RepoCreatePullReview (string owner, string repo, long index, CreatePullReviewOptions body)
        {
             ApiResponse<PullReview> localVarResponse = RepoCreatePullReviewWithHttpInfo(owner, repo, index, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PullReview</returns>
        public ApiResponse<PullReview> RepoCreatePullReviewWithHttpInfo (string owner, string repo, long index, CreatePullReviewOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoCreatePullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreatePullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Create a review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>Task of PullReview</returns>
        public async System.Threading.Tasks.Task<PullReview> RepoCreatePullReviewAsync (string owner, string repo, long index, CreatePullReviewOptions body)
        {
             ApiResponse<PullReview> localVarResponse = await RepoCreatePullReviewAsyncWithHttpInfo(owner, repo, index, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoCreatePullReviewAsyncWithHttpInfo (string owner, string repo, long index, CreatePullReviewOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoCreatePullReview");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoCreatePullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreatePullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Create a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Release</returns>
        public Release RepoCreateRelease (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption))
        {
             ApiResponse<Release> localVarResponse = RepoCreateReleaseWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse<Release> RepoCreateReleaseWithHttpInfo (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Create a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> RepoCreateReleaseAsync (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption))
        {
             ApiResponse<Release> localVarResponse = await RepoCreateReleaseAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> RepoCreateReleaseAsyncWithHttpInfo (string owner, string repo, CreateReleaseOption body = default(CreateReleaseOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Create a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Attachment</returns>
        public Attachment RepoCreateReleaseAttachment (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string))
        {
             ApiResponse<Attachment> localVarResponse = RepoCreateReleaseAttachmentWithHttpInfo(owner, repo, id, attachment, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>ApiResponse of Attachment</returns>
        public ApiResponse<Attachment> RepoCreateReleaseAttachmentWithHttpInfo (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling RepositoryApi->RepoCreateReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Create a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Task of Attachment</returns>
        public async System.Threading.Tasks.Task<Attachment> RepoCreateReleaseAttachmentAsync (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string))
        {
             ApiResponse<Attachment> localVarResponse = await RepoCreateReleaseAttachmentAsyncWithHttpInfo(owner, repo, id, attachment, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachment">attachment to upload</param>
        /// <param name="name">name of the attachment (optional)</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoCreateReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, System.IO.Stream attachment, string name = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoCreateReleaseAttachment");
            // verify the required parameter 'attachment' is set
            if (attachment == null)
                throw new ApiException(400, "Missing required parameter 'attachment' when calling RepositoryApi->RepoCreateReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (attachment != null) localVarFileParams.Add("attachment", this.Configuration.ApiClient.ParameterToFile("attachment", attachment));

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Create a commit status 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Status</returns>
        public Status RepoCreateStatus (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption))
        {
             ApiResponse<Status> localVarResponse = RepoCreateStatusWithHttpInfo(owner, repo, sha, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a commit status 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse<Status> RepoCreateStatusWithHttpInfo (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateStatus");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateStatus");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoCreateStatus");

            var localVarPath = "./repos/{owner}/{repo}/statuses/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Create a commit status 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> RepoCreateStatusAsync (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption))
        {
             ApiResponse<Status> localVarResponse = await RepoCreateStatusAsyncWithHttpInfo(owner, repo, sha, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a commit status 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> RepoCreateStatusAsyncWithHttpInfo (string owner, string repo, string sha, CreateStatusOption body = default(CreateStatusOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoCreateStatus");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoCreateStatus");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoCreateStatus");

            var localVarPath = "./repos/{owner}/{repo}/statuses/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoCreateStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Delete a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns></returns>
        public void RepoDelete (string owner, string repo)
        {
             RepoDeleteWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Delete a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDelete");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDelete");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteAsync (string owner, string repo)
        {
             await RepoDeleteAsyncWithHttpInfo(owner, repo);

        }

        /// <summary>
        /// Delete a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to delete</param>
        /// <param name="repo">name of the repo to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDelete");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDelete");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific branch from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns></returns>
        public void RepoDeleteBranch (string owner, string repo, string branch)
        {
             RepoDeleteBranchWithHttpInfo(owner, repo, branch);
        }

        /// <summary>
        /// Delete a specific branch from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteBranchWithHttpInfo (string owner, string repo, string branch)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling RepositoryApi->RepoDeleteBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches/{branch}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific branch from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteBranchAsync (string owner, string repo, string branch)
        {
             await RepoDeleteBranchAsyncWithHttpInfo(owner, repo, branch);

        }

        /// <summary>
        /// Delete a specific branch from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteBranchAsyncWithHttpInfo (string owner, string repo, string branch)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling RepositoryApi->RepoDeleteBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches/{branch}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns></returns>
        public void RepoDeleteBranchProtection (string owner, string repo, string name)
        {
             RepoDeleteBranchProtectionWithHttpInfo(owner, repo, name);
        }

        /// <summary>
        /// Delete a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteBranchProtectionWithHttpInfo (string owner, string repo, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoDeleteBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteBranchProtectionAsync (string owner, string repo, string name)
        {
             await RepoDeleteBranchProtectionAsyncWithHttpInfo(owner, repo, name);

        }

        /// <summary>
        /// Delete a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoDeleteBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a collaborator from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns></returns>
        public void RepoDeleteCollaborator (string owner, string repo, string collaborator)
        {
             RepoDeleteCollaboratorWithHttpInfo(owner, repo, collaborator);
        }

        /// <summary>
        /// Delete a collaborator from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteCollaboratorWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoDeleteCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a collaborator from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteCollaboratorAsync (string owner, string repo, string collaborator)
        {
             await RepoDeleteCollaboratorAsyncWithHttpInfo(owner, repo, collaborator);

        }

        /// <summary>
        /// Delete a collaborator from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="collaborator">username of the collaborator to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteCollaboratorAsyncWithHttpInfo (string owner, string repo, string collaborator)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteCollaborator");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteCollaborator");
            // verify the required parameter 'collaborator' is set
            if (collaborator == null)
                throw new ApiException(400, "Missing required parameter 'collaborator' when calling RepositoryApi->RepoDeleteCollaborator");

            var localVarPath = "./repos/{owner}/{repo}/collaborators/{collaborator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (collaborator != null) localVarPathParams.Add("collaborator", this.Configuration.ApiClient.ParameterToString(collaborator)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteCollaborator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>FileDeleteResponse</returns>
        public FileDeleteResponse RepoDeleteFile (string owner, string repo, string filepath, DeleteFileOptions body)
        {
             ApiResponse<FileDeleteResponse> localVarResponse = RepoDeleteFileWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileDeleteResponse</returns>
        public ApiResponse<FileDeleteResponse> RepoDeleteFileWithHttpInfo (string owner, string repo, string filepath, DeleteFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoDeleteFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDeleteResponse)));
        }

        /// <summary>
        /// Delete a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of FileDeleteResponse</returns>
        public async System.Threading.Tasks.Task<FileDeleteResponse> RepoDeleteFileAsync (string owner, string repo, string filepath, DeleteFileOptions body)
        {
             ApiResponse<FileDeleteResponse> localVarResponse = await RepoDeleteFileAsyncWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to delete</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDeleteResponse>> RepoDeleteFileAsyncWithHttpInfo (string owner, string repo, string filepath, DeleteFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoDeleteFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoDeleteFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileDeleteResponse)));
        }

        /// <summary>
        /// Delete a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns></returns>
        public void RepoDeleteGitHook (string owner, string repo, string id)
        {
             RepoDeleteGitHookWithHttpInfo(owner, repo, id);
        }

        /// <summary>
        /// Delete a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteGitHookWithHttpInfo (string owner, string repo, string id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteGitHookAsync (string owner, string repo, string id)
        {
             await RepoDeleteGitHookAsyncWithHttpInfo(owner, repo, id);

        }

        /// <summary>
        /// Delete a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteGitHookAsyncWithHttpInfo (string owner, string repo, string id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns></returns>
        public void RepoDeleteHook (string owner, string repo, long id)
        {
             RepoDeleteHookWithHttpInfo(owner, repo, id);
        }

        /// <summary>
        /// Delete a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteHookWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteHookAsync (string owner, string repo, long id)
        {
             await RepoDeleteHookAsyncWithHttpInfo(owner, repo, id);

        }

        /// <summary>
        /// Delete a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteHookAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a key from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns></returns>
        public void RepoDeleteKey (string owner, string repo, long id)
        {
             RepoDeleteKeyWithHttpInfo(owner, repo, id);
        }

        /// <summary>
        /// Delete a key from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteKeyWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteKey");

            var localVarPath = "./repos/{owner}/{repo}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a key from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteKeyAsync (string owner, string repo, long id)
        {
             await RepoDeleteKeyAsyncWithHttpInfo(owner, repo, id);

        }

        /// <summary>
        /// Delete a key from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteKeyAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteKey");

            var localVarPath = "./repos/{owner}/{repo}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific review from a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns></returns>
        public void RepoDeletePullReview (string owner, string repo, long index, long id)
        {
             RepoDeletePullReviewWithHttpInfo(owner, repo, index, id);
        }

        /// <summary>
        /// Delete a specific review from a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeletePullReviewWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeletePullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeletePullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a specific review from a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeletePullReviewAsync (string owner, string repo, long index, long id)
        {
             await RepoDeletePullReviewAsyncWithHttpInfo(owner, repo, index, id);

        }

        /// <summary>
        /// Delete a specific review from a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeletePullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDeletePullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeletePullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeletePullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns></returns>
        public void RepoDeleteRelease (string owner, string repo, long id)
        {
             RepoDeleteReleaseWithHttpInfo(owner, repo, id);
        }

        /// <summary>
        /// Delete a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteReleaseWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteReleaseAsync (string owner, string repo, long id)
        {
             await RepoDeleteReleaseAsyncWithHttpInfo(owner, repo, id);

        }

        /// <summary>
        /// Delete a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteReleaseAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns></returns>
        public void RepoDeleteReleaseAttachment (string owner, string repo, long id, long attachmentId)
        {
             RepoDeleteReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId);
        }

        /// <summary>
        /// Delete a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoDeleteReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId)
        {
             await RepoDeleteReleaseAttachmentAsyncWithHttpInfo(owner, repo, id, attachmentId);

        }

        /// <summary>
        /// Delete a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoDeleteReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoDeleteReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a topic from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns></returns>
        public void RepoDeleteTopic (string owner, string repo, string topic)
        {
             RepoDeleteTopicWithHttpInfo(owner, repo, topic);
        }

        /// <summary>
        /// Delete a topic from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoDeleteTopicWithHttpInfo (string owner, string repo, string topic)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteTopic");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteTopic");
            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new ApiException(400, "Missing required parameter 'topic' when calling RepositoryApi->RepoDeleteTopic");

            var localVarPath = "./repos/{owner}/{repo}/topics/{topic}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (topic != null) localVarPathParams.Add("topic", this.Configuration.ApiClient.ParameterToString(topic)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a topic from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoDeleteTopicAsync (string owner, string repo, string topic)
        {
             await RepoDeleteTopicAsyncWithHttpInfo(owner, repo, topic);

        }

        /// <summary>
        /// Delete a topic from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="topic">name of the topic to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoDeleteTopicAsyncWithHttpInfo (string owner, string repo, string topic)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDeleteTopic");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDeleteTopic");
            // verify the required parameter 'topic' is set
            if (topic == null)
                throw new ApiException(400, "Missing required parameter 'topic' when calling RepositoryApi->RepoDeleteTopic");

            var localVarPath = "./repos/{owner}/{repo}/topics/{topic}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (topic != null) localVarPathParams.Add("topic", this.Configuration.ApiClient.ParameterToString(topic)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDeleteTopic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a pull request diff 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>string</returns>
        public string RepoDownloadPullDiff (string owner, string repo, long index)
        {
             ApiResponse<string> localVarResponse = RepoDownloadPullDiffWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a pull request diff 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> RepoDownloadPullDiffWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDownloadPullDiff");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDownloadPullDiff");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDownloadPullDiff");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}.diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDownloadPullDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a pull request diff 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RepoDownloadPullDiffAsync (string owner, string repo, long index)
        {
             ApiResponse<string> localVarResponse = await RepoDownloadPullDiffAsyncWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a pull request diff 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> RepoDownloadPullDiffAsyncWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDownloadPullDiff");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDownloadPullDiff");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDownloadPullDiff");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}.diff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDownloadPullDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a pull request patch file 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>string</returns>
        public string RepoDownloadPullPatch (string owner, string repo, long index)
        {
             ApiResponse<string> localVarResponse = RepoDownloadPullPatchWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a pull request patch file 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> RepoDownloadPullPatchWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDownloadPullPatch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDownloadPullPatch");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDownloadPullPatch");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}.patch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDownloadPullPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a pull request patch file 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RepoDownloadPullPatchAsync (string owner, string repo, long index)
        {
             ApiResponse<string> localVarResponse = await RepoDownloadPullPatchAsyncWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a pull request patch file 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> RepoDownloadPullPatchAsyncWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoDownloadPullPatch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoDownloadPullPatch");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoDownloadPullPatch");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}.patch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoDownloadPullPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Repository</returns>
        public Repository RepoEdit (string owner, string repo, EditRepoOption body = default(EditRepoOption))
        {
             ApiResponse<Repository> localVarResponse = RepoEditWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> RepoEditWithHttpInfo (string owner, string repo, EditRepoOption body = default(EditRepoOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEdit");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEdit");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> RepoEditAsync (string owner, string repo, EditRepoOption body = default(EditRepoOption))
        {
             ApiResponse<Repository> localVarResponse = await RepoEditAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a repository&#39;s properties. Only fields that are set will be changed. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to edit</param>
        /// <param name="repo">name of the repo to edit</param>
        /// <param name="body">Properties of a repo that you can edit (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> RepoEditAsyncWithHttpInfo (string owner, string repo, EditRepoOption body = default(EditRepoOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEdit");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEdit");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>BranchProtection</returns>
        public BranchProtection RepoEditBranchProtection (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption))
        {
             ApiResponse<BranchProtection> localVarResponse = RepoEditBranchProtectionWithHttpInfo(owner, repo, name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        public ApiResponse<BranchProtection> RepoEditBranchProtectionWithHttpInfo (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoEditBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of BranchProtection</returns>
        public async System.Threading.Tasks.Task<BranchProtection> RepoEditBranchProtectionAsync (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption))
        {
             ApiResponse<BranchProtection> localVarResponse = await RepoEditBranchProtectionAsyncWithHttpInfo(owner, repo, name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a branch protections for a repository. Only fields that are set will be changed 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoEditBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name, EditBranchProtectionOption body = default(EditBranchProtectionOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoEditBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Edit a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>GitHook</returns>
        public GitHook RepoEditGitHook (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption))
        {
             ApiResponse<GitHook> localVarResponse = RepoEditGitHookWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GitHook</returns>
        public ApiResponse<GitHook> RepoEditGitHookWithHttpInfo (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitHook)));
        }

        /// <summary>
        /// Edit a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GitHook</returns>
        public async System.Threading.Tasks.Task<GitHook> RepoEditGitHookAsync (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption))
        {
             ApiResponse<GitHook> localVarResponse = await RepoEditGitHookAsyncWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a Git hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GitHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GitHook>> RepoEditGitHookAsyncWithHttpInfo (string owner, string repo, string id, EditGitHookOption body = default(EditGitHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitHook)));
        }

        /// <summary>
        /// Edit a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Hook</returns>
        public Hook RepoEditHook (string owner, string repo, long id, EditHookOption body = default(EditHookOption))
        {
             ApiResponse<Hook> localVarResponse = RepoEditHookWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Hook</returns>
        public ApiResponse<Hook> RepoEditHookWithHttpInfo (string owner, string repo, long id, EditHookOption body = default(EditHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Edit a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> RepoEditHookAsync (string owner, string repo, long id, EditHookOption body = default(EditHookOption))
        {
             ApiResponse<Hook> localVarResponse = await RepoEditHookAsyncWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a hook in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">index of the hook</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Hook>> RepoEditHookAsyncWithHttpInfo (string owner, string repo, long id, EditHookOption body = default(EditHookOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PullRequest</returns>
        public PullRequest RepoEditPullRequest (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption))
        {
             ApiResponse<PullRequest> localVarResponse = RepoEditPullRequestWithHttpInfo(owner, repo, index, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PullRequest</returns>
        public ApiResponse<PullRequest> RepoEditPullRequestWithHttpInfo (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditPullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditPullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoEditPullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditPullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PullRequest</returns>
        public async System.Threading.Tasks.Task<PullRequest> RepoEditPullRequestAsync (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption))
        {
             ApiResponse<PullRequest> localVarResponse = await RepoEditPullRequestAsyncWithHttpInfo(owner, repo, index, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a pull request. If using deadline only the date will be taken into account, and time of day ignored. 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoEditPullRequestAsyncWithHttpInfo (string owner, string repo, long index, EditPullRequestOption body = default(EditPullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditPullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditPullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoEditPullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditPullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Update a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Release</returns>
        public Release RepoEditRelease (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption))
        {
             ApiResponse<Release> localVarResponse = RepoEditReleaseWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse<Release> RepoEditReleaseWithHttpInfo (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Update a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> RepoEditReleaseAsync (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption))
        {
             ApiResponse<Release> localVarResponse = await RepoEditReleaseAsyncWithHttpInfo(owner, repo, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> RepoEditReleaseAsyncWithHttpInfo (string owner, string repo, long id, EditReleaseOption body = default(EditReleaseOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Edit a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Attachment</returns>
        public Attachment RepoEditReleaseAttachment (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions))
        {
             ApiResponse<Attachment> localVarResponse = RepoEditReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Attachment</returns>
        public ApiResponse<Attachment> RepoEditReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoEditReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Edit a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Attachment</returns>
        public async System.Threading.Tasks.Task<Attachment> RepoEditReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions))
        {
             ApiResponse<Attachment> localVarResponse = await RepoEditReleaseAttachmentAsyncWithHttpInfo(owner, repo, id, attachmentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoEditReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId, EditAttachmentOptions body = default(EditAttachmentOptions))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoEditReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoEditReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoEditReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Get a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Repository</returns>
        public Repository RepoGet (string owner, string repo)
        {
             ApiResponse<Repository> localVarResponse = RepoGetWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> RepoGetWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGet");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGet");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> RepoGetAsync (string owner, string repo)
        {
             ApiResponse<Repository> localVarResponse = await RepoGetAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> RepoGetAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGet");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGet");

            var localVarPath = "./repos/{owner}/{repo}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get a list of all commits from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Commit&gt;</returns>
        public List<Commit> RepoGetAllCommits (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Commit>> localVarResponse = RepoGetAllCommitsWithHttpInfo(owner, repo, sha, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all commits from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Commit&gt;</returns>
        public ApiResponse<List<Commit>> RepoGetAllCommitsWithHttpInfo (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetAllCommits");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetAllCommits");

            var localVarPath = "./repos/{owner}/{repo}/commits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sha", sha)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetAllCommits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Commit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Commit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Commit>)));
        }

        /// <summary>
        /// Get a list of all commits from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Commit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Commit>> RepoGetAllCommitsAsync (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Commit>> localVarResponse = await RepoGetAllCommitsAsyncWithHttpInfo(owner, repo, sha, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all commits from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">SHA or branch to start listing commits from (usually &#39;master&#39;) (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Commit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Commit>>> RepoGetAllCommitsAsyncWithHttpInfo (string owner, string repo, string sha = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetAllCommits");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetAllCommits");

            var localVarPath = "./repos/{owner}/{repo}/commits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sha", sha)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetAllCommits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Commit>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Commit>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Commit>)));
        }

        /// <summary>
        /// Get an archive of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns></returns>
        public void RepoGetArchive (string owner, string repo, string archive)
        {
             RepoGetArchiveWithHttpInfo(owner, repo, archive);
        }

        /// <summary>
        /// Get an archive of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoGetArchiveWithHttpInfo (string owner, string repo, string archive)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetArchive");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetArchive");
            // verify the required parameter 'archive' is set
            if (archive == null)
                throw new ApiException(400, "Missing required parameter 'archive' when calling RepositoryApi->RepoGetArchive");

            var localVarPath = "./repos/{owner}/{repo}/archive/{archive}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (archive != null) localVarPathParams.Add("archive", this.Configuration.ApiClient.ParameterToString(archive)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an archive of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoGetArchiveAsync (string owner, string repo, string archive)
        {
             await RepoGetArchiveAsyncWithHttpInfo(owner, repo, archive);

        }

        /// <summary>
        /// Get an archive of a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="archive">archive to download, consisting of a git reference and archive</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetArchiveAsyncWithHttpInfo (string owner, string repo, string archive)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetArchive");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetArchive");
            // verify the required parameter 'archive' is set
            if (archive == null)
                throw new ApiException(400, "Missing required parameter 'archive' when calling RepositoryApi->RepoGetArchive");

            var localVarPath = "./repos/{owner}/{repo}/archive/{archive}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (archive != null) localVarPathParams.Add("archive", this.Configuration.ApiClient.ParameterToString(archive)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetArchive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Branch</returns>
        public Branch RepoGetBranch (string owner, string repo, string branch)
        {
             ApiResponse<Branch> localVarResponse = RepoGetBranchWithHttpInfo(owner, repo, branch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>ApiResponse of Branch</returns>
        public ApiResponse<Branch> RepoGetBranchWithHttpInfo (string owner, string repo, string branch)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling RepositoryApi->RepoGetBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches/{branch}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Task of Branch</returns>
        public async System.Threading.Tasks.Task<Branch> RepoGetBranchAsync (string owner, string repo, string branch)
        {
             ApiResponse<Branch> localVarResponse = await RepoGetBranchAsyncWithHttpInfo(owner, repo, branch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a specific branch from a repository, including its effective branch protection 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="branch">branch to get</param>
        /// <returns>Task of ApiResponse (Branch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branch>> RepoGetBranchAsyncWithHttpInfo (string owner, string repo, string branch)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetBranch");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling RepositoryApi->RepoGetBranch");

            var localVarPath = "./repos/{owner}/{repo}/branches/{branch}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Branch) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branch)));
        }

        /// <summary>
        /// Get a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>BranchProtection</returns>
        public BranchProtection RepoGetBranchProtection (string owner, string repo, string name)
        {
             ApiResponse<BranchProtection> localVarResponse = RepoGetBranchProtectionWithHttpInfo(owner, repo, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>ApiResponse of BranchProtection</returns>
        public ApiResponse<BranchProtection> RepoGetBranchProtectionWithHttpInfo (string owner, string repo, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoGetBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Get a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of BranchProtection</returns>
        public async System.Threading.Tasks.Task<BranchProtection> RepoGetBranchProtectionAsync (string owner, string repo, string name)
        {
             ApiResponse<BranchProtection> localVarResponse = await RepoGetBranchProtectionAsyncWithHttpInfo(owner, repo, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific branch protection for the repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="name">name of protected branch</param>
        /// <returns>Task of ApiResponse (BranchProtection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchProtection>> RepoGetBranchProtectionAsyncWithHttpInfo (string owner, string repo, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetBranchProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling RepositoryApi->RepoGetBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchProtection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BranchProtection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchProtection)));
        }

        /// <summary>
        /// Get a repository by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Repository</returns>
        public Repository RepoGetByID (long id)
        {
             ApiResponse<Repository> localVarResponse = RepoGetByIDWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a repository by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> RepoGetByIDWithHttpInfo (long id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetByID");

            var localVarPath = "./repositories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get a repository by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> RepoGetByIDAsync (long id)
        {
             ApiResponse<Repository> localVarResponse = await RepoGetByIDAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a repository by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the repo to get</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> RepoGetByIDAsyncWithHttpInfo (long id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetByID");

            var localVarPath = "./repositories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Status</returns>
        public Status RepoGetCombinedStatusByRef (string owner, string repo, string _ref, int page = default(int))
        {
             ApiResponse<Status> localVarResponse = RepoGetCombinedStatusByRefWithHttpInfo(owner, repo, _ref, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse<Status> RepoGetCombinedStatusByRefWithHttpInfo (string owner, string repo, string _ref, int page = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetCombinedStatusByRef");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetCombinedStatusByRef");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling RepositoryApi->RepoGetCombinedStatusByRef");

            var localVarPath = "./repos/{owner}/{repo}/commits/{ref}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetCombinedStatusByRef", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> RepoGetCombinedStatusByRefAsync (string owner, string repo, string _ref, int page = default(int))
        {
             ApiResponse<Status> localVarResponse = await RepoGetCombinedStatusByRefAsyncWithHttpInfo(owner, repo, _ref, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a commit&#39;s combined status, by branch/tag/commit reference 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">name of branch/tag/commit</param>
        /// <param name="page">page number of results (optional)</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> RepoGetCombinedStatusByRefAsyncWithHttpInfo (string owner, string repo, string _ref, int page = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetCombinedStatusByRef");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetCombinedStatusByRef");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling RepositoryApi->RepoGetCombinedStatusByRef");

            var localVarPath = "./repos/{owner}/{repo}/commits/{ref}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetCombinedStatusByRef", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ContentsResponse</returns>
        public ContentsResponse RepoGetContents (string owner, string repo, string filepath, string _ref = default(string))
        {
             ApiResponse<ContentsResponse> localVarResponse = RepoGetContentsWithHttpInfo(owner, repo, filepath, _ref);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ApiResponse of ContentsResponse</returns>
        public ApiResponse<ContentsResponse> RepoGetContentsWithHttpInfo (string owner, string repo, string filepath, string _ref = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetContents");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetContents");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetContents");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (_ref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ref", _ref)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentsResponse)));
        }

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ContentsResponse</returns>
        public async System.Threading.Tasks.Task<ContentsResponse> RepoGetContentsAsync (string owner, string repo, string filepath, string _ref = default(string))
        {
             ApiResponse<ContentsResponse> localVarResponse = await RepoGetContentsAsyncWithHttpInfo(owner, repo, filepath, _ref);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the dir, file, symlink or submodule in the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ApiResponse (ContentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContentsResponse>> RepoGetContentsAsyncWithHttpInfo (string owner, string repo, string filepath, string _ref = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetContents");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetContents");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetContents");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (_ref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ref", _ref)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetContents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContentsResponse)));
        }

        /// <summary>
        /// Gets the metadata of all the entries of the root dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>List&lt;ContentsResponse&gt;</returns>
        public List<ContentsResponse> RepoGetContentsList (string owner, string repo, string _ref = default(string))
        {
             ApiResponse<List<ContentsResponse>> localVarResponse = RepoGetContentsListWithHttpInfo(owner, repo, _ref);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the metadata of all the entries of the root dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>ApiResponse of List&lt;ContentsResponse&gt;</returns>
        public ApiResponse<List<ContentsResponse>> RepoGetContentsListWithHttpInfo (string owner, string repo, string _ref = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetContentsList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetContentsList");

            var localVarPath = "./repos/{owner}/{repo}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ref", _ref)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetContentsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContentsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ContentsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContentsResponse>)));
        }

        /// <summary>
        /// Gets the metadata of all the entries of the root dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of List&lt;ContentsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContentsResponse>> RepoGetContentsListAsync (string owner, string repo, string _ref = default(string))
        {
             ApiResponse<List<ContentsResponse>> localVarResponse = await RepoGetContentsListAsyncWithHttpInfo(owner, repo, _ref);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the metadata of all the entries of the root dir 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">The name of the commit/branch/tag. Default the repository’s default branch (usually master) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ContentsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContentsResponse>>> RepoGetContentsListAsyncWithHttpInfo (string owner, string repo, string _ref = default(string))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetContentsList");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetContentsList");

            var localVarPath = "./repos/{owner}/{repo}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ref", _ref)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetContentsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContentsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ContentsResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContentsResponse>)));
        }

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns></returns>
        public void RepoGetEditorConfig (string owner, string repo, string filepath)
        {
             RepoGetEditorConfigWithHttpInfo(owner, repo, filepath);
        }

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoGetEditorConfigWithHttpInfo (string owner, string repo, string filepath)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetEditorConfig");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetEditorConfig");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetEditorConfig");

            var localVarPath = "./repos/{owner}/{repo}/editorconfig/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetEditorConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoGetEditorConfigAsync (string owner, string repo, string filepath)
        {
             await RepoGetEditorConfigAsyncWithHttpInfo(owner, repo, filepath);

        }

        /// <summary>
        /// Get the EditorConfig definitions of a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of file to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetEditorConfigAsyncWithHttpInfo (string owner, string repo, string filepath)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetEditorConfig");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetEditorConfig");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetEditorConfig");

            var localVarPath = "./repos/{owner}/{repo}/editorconfig/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetEditorConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a Git hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>GitHook</returns>
        public GitHook RepoGetGitHook (string owner, string repo, string id)
        {
             ApiResponse<GitHook> localVarResponse = RepoGetGitHookWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Git hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of GitHook</returns>
        public ApiResponse<GitHook> RepoGetGitHookWithHttpInfo (string owner, string repo, string id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitHook)));
        }

        /// <summary>
        /// Get a Git hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of GitHook</returns>
        public async System.Threading.Tasks.Task<GitHook> RepoGetGitHookAsync (string owner, string repo, string id)
        {
             ApiResponse<GitHook> localVarResponse = await RepoGetGitHookAsyncWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Git hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse (GitHook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GitHook>> RepoGetGitHookAsyncWithHttpInfo (string owner, string repo, string id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetGitHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetGitHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetGitHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetGitHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GitHook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GitHook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GitHook)));
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Hook</returns>
        public Hook RepoGetHook (string owner, string repo, long id)
        {
             ApiResponse<Hook> localVarResponse = RepoGetHookWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>ApiResponse of Hook</returns>
        public ApiResponse<Hook> RepoGetHookWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of Hook</returns>
        public async System.Threading.Tasks.Task<Hook> RepoGetHookAsync (string owner, string repo, long id)
        {
             ApiResponse<Hook> localVarResponse = await RepoGetHookAsyncWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a hook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to get</param>
        /// <returns>Task of ApiResponse (Hook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Hook>> RepoGetHookAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Hook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Hook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Hook)));
        }

        /// <summary>
        /// Get a repository&#39;s key by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>DeployKey</returns>
        public DeployKey RepoGetKey (string owner, string repo, long id)
        {
             ApiResponse<DeployKey> localVarResponse = RepoGetKeyWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a repository&#39;s key by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>ApiResponse of DeployKey</returns>
        public ApiResponse<DeployKey> RepoGetKeyWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetKey");

            var localVarPath = "./repos/{owner}/{repo}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeployKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployKey)));
        }

        /// <summary>
        /// Get a repository&#39;s key by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>Task of DeployKey</returns>
        public async System.Threading.Tasks.Task<DeployKey> RepoGetKeyAsync (string owner, string repo, long id)
        {
             ApiResponse<DeployKey> localVarResponse = await RepoGetKeyAsyncWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a repository&#39;s key by id 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the key to get</param>
        /// <returns>Task of ApiResponse (DeployKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeployKey>> RepoGetKeyAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetKey");

            var localVarPath = "./repos/{owner}/{repo}/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeployKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployKey)));
        }

        /// <summary>
        /// Get languages and number of bytes of code written 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Dictionary&lt;string, long&gt;</returns>
        public Dictionary<string, long> RepoGetLanguages (string owner, string repo)
        {
             ApiResponse<Dictionary<string, long>> localVarResponse = RepoGetLanguagesWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get languages and number of bytes of code written 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Dictionary&lt;string, long&gt;</returns>
        public ApiResponse<Dictionary<string, long>> RepoGetLanguagesWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetLanguages");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetLanguages");

            var localVarPath = "./repos/{owner}/{repo}/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dictionary<string, long>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long>)));
        }

        /// <summary>
        /// Get languages and number of bytes of code written 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of Dictionary&lt;string, long&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, long>> RepoGetLanguagesAsync (string owner, string repo)
        {
             ApiResponse<Dictionary<string, long>> localVarResponse = await RepoGetLanguagesAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get languages and number of bytes of code written 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, long&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, long>>> RepoGetLanguagesAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetLanguages");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetLanguages");

            var localVarPath = "./repos/{owner}/{repo}/languages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, long>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Dictionary<string, long>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, long>)));
        }

        /// <summary>
        /// Get a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>PullRequest</returns>
        public PullRequest RepoGetPullRequest (string owner, string repo, long index)
        {
             ApiResponse<PullRequest> localVarResponse = RepoGetPullRequestWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>ApiResponse of PullRequest</returns>
        public ApiResponse<PullRequest> RepoGetPullRequestWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Get a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of PullRequest</returns>
        public async System.Threading.Tasks.Task<PullRequest> RepoGetPullRequestAsync (string owner, string repo, long index)
        {
             ApiResponse<PullRequest> localVarResponse = await RepoGetPullRequestAsyncWithHttpInfo(owner, repo, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to get</param>
        /// <returns>Task of ApiResponse (PullRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullRequest>> RepoGetPullRequestAsyncWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullRequest)));
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>PullReview</returns>
        public PullReview RepoGetPullReview (string owner, string repo, long index, long id)
        {
             ApiResponse<PullReview> localVarResponse = RepoGetPullReviewWithHttpInfo(owner, repo, index, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of PullReview</returns>
        public ApiResponse<PullReview> RepoGetPullReviewWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetPullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of PullReview</returns>
        public async System.Threading.Tasks.Task<PullReview> RepoGetPullReviewAsync (string owner, string repo, long index, long id)
        {
             ApiResponse<PullReview> localVarResponse = await RepoGetPullReviewAsyncWithHttpInfo(owner, repo, index, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoGetPullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetPullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>List&lt;PullReviewComment&gt;</returns>
        public List<PullReviewComment> RepoGetPullReviewComments (string owner, string repo, long index, long id)
        {
             ApiResponse<List<PullReviewComment>> localVarResponse = RepoGetPullReviewCommentsWithHttpInfo(owner, repo, index, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>ApiResponse of List&lt;PullReviewComment&gt;</returns>
        public ApiResponse<List<PullReviewComment>> RepoGetPullReviewCommentsWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetPullReviewComments");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullReviewComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullReviewComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullReviewComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullReviewComment>)));
        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of List&lt;PullReviewComment&gt;</returns>
        public async System.Threading.Tasks.Task<List<PullReviewComment>> RepoGetPullReviewCommentsAsync (string owner, string repo, long index, long id)
        {
             ApiResponse<List<PullReviewComment>> localVarResponse = await RepoGetPullReviewCommentsAsyncWithHttpInfo(owner, repo, index, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific review for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <returns>Task of ApiResponse (List&lt;PullReviewComment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PullReviewComment>>> RepoGetPullReviewCommentsAsyncWithHttpInfo (string owner, string repo, long index, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoGetPullReviewComments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetPullReviewComments");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetPullReviewComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullReviewComment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullReviewComment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullReviewComment>)));
        }

        /// <summary>
        /// Get a file from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns></returns>
        public void RepoGetRawFile (string owner, string repo, string filepath)
        {
             RepoGetRawFileWithHttpInfo(owner, repo, filepath);
        }

        /// <summary>
        /// Get a file from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoGetRawFileWithHttpInfo (string owner, string repo, string filepath)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetRawFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetRawFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetRawFile");

            var localVarPath = "./repos/{owner}/{repo}/raw/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetRawFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a file from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoGetRawFileAsync (string owner, string repo, string filepath)
        {
             await RepoGetRawFileAsyncWithHttpInfo(owner, repo, filepath);

        }

        /// <summary>
        /// Get a file from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">filepath of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoGetRawFileAsyncWithHttpInfo (string owner, string repo, string filepath)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetRawFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetRawFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoGetRawFile");

            var localVarPath = "./repos/{owner}/{repo}/raw/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetRawFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Release</returns>
        public Release RepoGetRelease (string owner, string repo, long id)
        {
             ApiResponse<Release> localVarResponse = RepoGetReleaseWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse<Release> RepoGetReleaseWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> RepoGetReleaseAsync (string owner, string repo, long id)
        {
             ApiResponse<Release> localVarResponse = await RepoGetReleaseAsyncWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a release 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release to get</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> RepoGetReleaseAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetRelease");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetRelease");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetRelease");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Attachment</returns>
        public Attachment RepoGetReleaseAttachment (string owner, string repo, long id, long attachmentId)
        {
             ApiResponse<Attachment> localVarResponse = RepoGetReleaseAttachmentWithHttpInfo(owner, repo, id, attachmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>ApiResponse of Attachment</returns>
        public ApiResponse<Attachment> RepoGetReleaseAttachmentWithHttpInfo (string owner, string repo, long id, long attachmentId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoGetReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Get a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Task of Attachment</returns>
        public async System.Threading.Tasks.Task<Attachment> RepoGetReleaseAttachmentAsync (string owner, string repo, long id, long attachmentId)
        {
             ApiResponse<Attachment> localVarResponse = await RepoGetReleaseAttachmentAsyncWithHttpInfo(owner, repo, id, attachmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a release attachment 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <param name="attachmentId">id of the attachment to get</param>
        /// <returns>Task of ApiResponse (Attachment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attachment>> RepoGetReleaseAttachmentAsyncWithHttpInfo (string owner, string repo, long id, long attachmentId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoGetReleaseAttachment");
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling RepositoryApi->RepoGetReleaseAttachment");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (attachmentId != null) localVarPathParams.Add("attachment_id", this.Configuration.ApiClient.ParameterToString(attachmentId)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetReleaseAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attachment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Attachment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attachment)));
        }

        /// <summary>
        /// Get a single commit from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Commit</returns>
        public Commit RepoGetSingleCommit (string owner, string repo, string sha)
        {
             ApiResponse<Commit> localVarResponse = RepoGetSingleCommitWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single commit from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>ApiResponse of Commit</returns>
        public ApiResponse<Commit> RepoGetSingleCommitWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetSingleCommit");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetSingleCommit");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoGetSingleCommit");

            var localVarPath = "./repos/{owner}/{repo}/git/commits/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetSingleCommit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Commit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Commit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Commit)));
        }

        /// <summary>
        /// Get a single commit from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Task of Commit</returns>
        public async System.Threading.Tasks.Task<Commit> RepoGetSingleCommitAsync (string owner, string repo, string sha)
        {
             ApiResponse<Commit> localVarResponse = await RepoGetSingleCommitAsyncWithHttpInfo(owner, repo, sha);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single commit from a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">a git ref or commit sha</param>
        /// <returns>Task of ApiResponse (Commit)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Commit>> RepoGetSingleCommitAsyncWithHttpInfo (string owner, string repo, string sha)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoGetSingleCommit");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoGetSingleCommit");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoGetSingleCommit");

            var localVarPath = "./repos/{owner}/{repo}/git/commits/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoGetSingleCommit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Commit>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Commit) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Commit)));
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;Reference&gt;</returns>
        public List<Reference> RepoListAllGitRefs (string owner, string repo)
        {
             ApiResponse<List<Reference>> localVarResponse = RepoListAllGitRefsWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        public ApiResponse<List<Reference>> RepoListAllGitRefsWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListAllGitRefs");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListAllGitRefs");

            var localVarPath = "./repos/{owner}/{repo}/git/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListAllGitRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Reference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Reference>> RepoListAllGitRefsAsync (string owner, string repo)
        {
             ApiResponse<List<Reference>> localVarResponse = await RepoListAllGitRefsAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Reference>>> RepoListAllGitRefsAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListAllGitRefs");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListAllGitRefs");

            var localVarPath = "./repos/{owner}/{repo}/git/refs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListAllGitRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Reference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// List branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;BranchProtection&gt;</returns>
        public List<BranchProtection> RepoListBranchProtection (string owner, string repo)
        {
             ApiResponse<List<BranchProtection>> localVarResponse = RepoListBranchProtectionWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;BranchProtection&gt;</returns>
        public ApiResponse<List<BranchProtection>> RepoListBranchProtectionWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BranchProtection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<BranchProtection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BranchProtection>)));
        }

        /// <summary>
        /// List branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;BranchProtection&gt;</returns>
        public async System.Threading.Tasks.Task<List<BranchProtection>> RepoListBranchProtectionAsync (string owner, string repo)
        {
             ApiResponse<List<BranchProtection>> localVarResponse = await RepoListBranchProtectionAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List branch protections for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;BranchProtection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BranchProtection>>> RepoListBranchProtectionAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListBranchProtection");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListBranchProtection");

            var localVarPath = "./repos/{owner}/{repo}/branch_protections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListBranchProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BranchProtection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<BranchProtection>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BranchProtection>)));
        }

        /// <summary>
        /// List a repository&#39;s branches 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;Branch&gt;</returns>
        public List<Branch> RepoListBranches (string owner, string repo)
        {
             ApiResponse<List<Branch>> localVarResponse = RepoListBranchesWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repository&#39;s branches 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;Branch&gt;</returns>
        public ApiResponse<List<Branch>> RepoListBranchesWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListBranches");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListBranches");

            var localVarPath = "./repos/{owner}/{repo}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Branch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Branch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Branch>)));
        }

        /// <summary>
        /// List a repository&#39;s branches 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;Branch&gt;</returns>
        public async System.Threading.Tasks.Task<List<Branch>> RepoListBranchesAsync (string owner, string repo)
        {
             ApiResponse<List<Branch>> localVarResponse = await RepoListBranchesAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repository&#39;s branches 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;Branch&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Branch>>> RepoListBranchesAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListBranches");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListBranches");

            var localVarPath = "./repos/{owner}/{repo}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Branch>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Branch>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Branch>)));
        }

        /// <summary>
        /// List a repository&#39;s collaborators 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> RepoListCollaborators (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = RepoListCollaboratorsWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repository&#39;s collaborators 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> RepoListCollaboratorsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListCollaborators");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListCollaborators");

            var localVarPath = "./repos/{owner}/{repo}/collaborators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListCollaborators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List a repository&#39;s collaborators 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> RepoListCollaboratorsAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = await RepoListCollaboratorsAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repository&#39;s collaborators 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListCollaboratorsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListCollaborators");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListCollaborators");

            var localVarPath = "./repos/{owner}/{repo}/collaborators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListCollaborators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the Git hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>List&lt;GitHook&gt;</returns>
        public List<GitHook> RepoListGitHooks (string owner, string repo)
        {
             ApiResponse<List<GitHook>> localVarResponse = RepoListGitHooksWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the Git hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of List&lt;GitHook&gt;</returns>
        public ApiResponse<List<GitHook>> RepoListGitHooksWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListGitHooks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListGitHooks");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListGitHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GitHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<GitHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GitHook>)));
        }

        /// <summary>
        /// List the Git hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of List&lt;GitHook&gt;</returns>
        public async System.Threading.Tasks.Task<List<GitHook>> RepoListGitHooksAsync (string owner, string repo)
        {
             ApiResponse<List<GitHook>> localVarResponse = await RepoListGitHooksAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the Git hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (List&lt;GitHook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GitHook>>> RepoListGitHooksAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListGitHooks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListGitHooks");

            var localVarPath = "./repos/{owner}/{repo}/hooks/git";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListGitHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GitHook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<GitHook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GitHook>)));
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>List&lt;Reference&gt;</returns>
        public List<Reference> RepoListGitRefs (string owner, string repo, string _ref)
        {
             ApiResponse<List<Reference>> localVarResponse = RepoListGitRefsWithHttpInfo(owner, repo, _ref);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>ApiResponse of List&lt;Reference&gt;</returns>
        public ApiResponse<List<Reference>> RepoListGitRefsWithHttpInfo (string owner, string repo, string _ref)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListGitRefs");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListGitRefs");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling RepositoryApi->RepoListGitRefs");

            var localVarPath = "./repos/{owner}/{repo}/git/refs/{ref}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListGitRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Reference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>Task of List&lt;Reference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Reference>> RepoListGitRefsAsync (string owner, string repo, string _ref)
        {
             ApiResponse<List<Reference>> localVarResponse = await RepoListGitRefsAsyncWithHttpInfo(owner, repo, _ref);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get specified ref or filtered repository&#39;s refs 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="_ref">part or full name of the ref</param>
        /// <returns>Task of ApiResponse (List&lt;Reference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Reference>>> RepoListGitRefsAsyncWithHttpInfo (string owner, string repo, string _ref)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListGitRefs");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListGitRefs");
            // verify the required parameter '_ref' is set
            if (_ref == null)
                throw new ApiException(400, "Missing required parameter '_ref' when calling RepositoryApi->RepoListGitRefs");

            var localVarPath = "./repos/{owner}/{repo}/git/refs/{ref}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (_ref != null) localVarPathParams.Add("ref", this.Configuration.ApiClient.ParameterToString(_ref)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListGitRefs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Reference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Reference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Reference>)));
        }

        /// <summary>
        /// List the hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Hook&gt;</returns>
        public List<Hook> RepoListHooks (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Hook>> localVarResponse = RepoListHooksWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Hook&gt;</returns>
        public ApiResponse<List<Hook>> RepoListHooksWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListHooks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListHooks");

            var localVarPath = "./repos/{owner}/{repo}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Hook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Hook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Hook>)));
        }

        /// <summary>
        /// List the hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Hook&gt;</returns>
        public async System.Threading.Tasks.Task<List<Hook>> RepoListHooksAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Hook>> localVarResponse = await RepoListHooksAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the hooks in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Hook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Hook>>> RepoListHooksAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListHooks");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListHooks");

            var localVarPath = "./repos/{owner}/{repo}/hooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListHooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Hook>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Hook>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Hook>)));
        }

        /// <summary>
        /// List a repository&#39;s keys 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;DeployKey&gt;</returns>
        public List<DeployKey> RepoListKeys (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<DeployKey>> localVarResponse = RepoListKeysWithHttpInfo(owner, repo, keyId, fingerprint, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repository&#39;s keys 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;DeployKey&gt;</returns>
        public ApiResponse<List<DeployKey>> RepoListKeysWithHttpInfo (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListKeys");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListKeys");

            var localVarPath = "./repos/{owner}/{repo}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (keyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_id", keyId)); // query parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeployKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DeployKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeployKey>)));
        }

        /// <summary>
        /// List a repository&#39;s keys 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;DeployKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeployKey>> RepoListKeysAsync (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<DeployKey>> localVarResponse = await RepoListKeysAsyncWithHttpInfo(owner, repo, keyId, fingerprint, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repository&#39;s keys 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="keyId">the key_id to search for (optional)</param>
        /// <param name="fingerprint">fingerprint of the key (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeployKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeployKey>>> RepoListKeysAsyncWithHttpInfo (string owner, string repo, int keyId = default(int), string fingerprint = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListKeys");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListKeys");

            var localVarPath = "./repos/{owner}/{repo}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (keyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key_id", keyId)); // query parameter
            if (fingerprint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fingerprint", fingerprint)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeployKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<DeployKey>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeployKey>)));
        }

        /// <summary>
        /// List a repo&#39;s pull requests 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;PullRequest&gt;</returns>
        public List<PullRequest> RepoListPullRequests (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<PullRequest>> localVarResponse = RepoListPullRequestsWithHttpInfo(owner, repo, state, sort, milestone, labels, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repo&#39;s pull requests 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;PullRequest&gt;</returns>
        public ApiResponse<List<PullRequest>> RepoListPullRequestsWithHttpInfo (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListPullRequests");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListPullRequests");

            var localVarPath = "./repos/{owner}/{repo}/pulls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (milestone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "milestone", milestone)); // query parameter
            if (labels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "labels", labels)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListPullRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullRequest>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullRequest>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullRequest>)));
        }

        /// <summary>
        /// List a repo&#39;s pull requests 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;PullRequest&gt;</returns>
        public async System.Threading.Tasks.Task<List<PullRequest>> RepoListPullRequestsAsync (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<PullRequest>> localVarResponse = await RepoListPullRequestsAsyncWithHttpInfo(owner, repo, state, sort, milestone, labels, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repo&#39;s pull requests 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="state">State of pull request: open or closed (optional) (optional)</param>
        /// <param name="sort">Type of sort (optional)</param>
        /// <param name="milestone">ID of the milestone (optional)</param>
        /// <param name="labels">Label IDs (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PullRequest&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PullRequest>>> RepoListPullRequestsAsyncWithHttpInfo (string owner, string repo, string state = default(string), string sort = default(string), long milestone = default(long), List<long> labels = default(List<long>), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListPullRequests");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListPullRequests");

            var localVarPath = "./repos/{owner}/{repo}/pulls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (milestone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "milestone", milestone)); // query parameter
            if (labels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "labels", labels)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListPullRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullRequest>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullRequest>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullRequest>)));
        }

        /// <summary>
        /// List all reviews for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;PullReview&gt;</returns>
        public List<PullReview> RepoListPullReviews (string owner, string repo, long index, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<PullReview>> localVarResponse = RepoListPullReviewsWithHttpInfo(owner, repo, index, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all reviews for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;PullReview&gt;</returns>
        public ApiResponse<List<PullReview>> RepoListPullReviewsWithHttpInfo (string owner, string repo, long index, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListPullReviews");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListPullReviews");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoListPullReviews");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListPullReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullReview>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullReview>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullReview>)));
        }

        /// <summary>
        /// List all reviews for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;PullReview&gt;</returns>
        public async System.Threading.Tasks.Task<List<PullReview>> RepoListPullReviewsAsync (string owner, string repo, long index, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<PullReview>> localVarResponse = await RepoListPullReviewsAsyncWithHttpInfo(owner, repo, index, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all reviews for a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PullReview&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PullReview>>> RepoListPullReviewsAsyncWithHttpInfo (string owner, string repo, long index, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListPullReviews");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListPullReviews");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoListPullReviews");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListPullReviews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PullReview>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<PullReview>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PullReview>)));
        }

        /// <summary>
        /// List release&#39;s attachments 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>List&lt;Attachment&gt;</returns>
        public List<Attachment> RepoListReleaseAttachments (string owner, string repo, long id)
        {
             ApiResponse<List<Attachment>> localVarResponse = RepoListReleaseAttachmentsWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List release&#39;s attachments 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>ApiResponse of List&lt;Attachment&gt;</returns>
        public ApiResponse<List<Attachment>> RepoListReleaseAttachmentsWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListReleaseAttachments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListReleaseAttachments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoListReleaseAttachments");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListReleaseAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Attachment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Attachment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Attachment>)));
        }

        /// <summary>
        /// List release&#39;s attachments 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>Task of List&lt;Attachment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Attachment>> RepoListReleaseAttachmentsAsync (string owner, string repo, long id)
        {
             ApiResponse<List<Attachment>> localVarResponse = await RepoListReleaseAttachmentsAsyncWithHttpInfo(owner, repo, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List release&#39;s attachments 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the release</param>
        /// <returns>Task of ApiResponse (List&lt;Attachment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Attachment>>> RepoListReleaseAttachmentsAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListReleaseAttachments");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListReleaseAttachments");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoListReleaseAttachments");

            var localVarPath = "./repos/{owner}/{repo}/releases/{id}/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListReleaseAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Attachment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Attachment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Attachment>)));
        }

        /// <summary>
        /// List a repo&#39;s releases 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Release&gt;</returns>
        public List<Release> RepoListReleases (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Release>> localVarResponse = RepoListReleasesWithHttpInfo(owner, repo, perPage, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repo&#39;s releases 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Release&gt;</returns>
        public ApiResponse<List<Release>> RepoListReleasesWithHttpInfo (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListReleases");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListReleases");

            var localVarPath = "./repos/{owner}/{repo}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Release>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Release>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Release>)));
        }

        /// <summary>
        /// List a repo&#39;s releases 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Release&gt;</returns>
        public async System.Threading.Tasks.Task<List<Release>> RepoListReleasesAsync (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Release>> localVarResponse = await RepoListReleasesAsyncWithHttpInfo(owner, repo, perPage, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repo&#39;s releases 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="perPage">page size of results, deprecated - use limit (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Release&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Release>>> RepoListReleasesAsyncWithHttpInfo (string owner, string repo, int perPage = default(int), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListReleases");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListReleases");

            var localVarPath = "./repos/{owner}/{repo}/releases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Release>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Release>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Release>)));
        }

        /// <summary>
        /// List a repo&#39;s stargazers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> RepoListStargazers (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = RepoListStargazersWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repo&#39;s stargazers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> RepoListStargazersWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListStargazers");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListStargazers");

            var localVarPath = "./repos/{owner}/{repo}/stargazers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListStargazers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List a repo&#39;s stargazers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> RepoListStargazersAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = await RepoListStargazersAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repo&#39;s stargazers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListStargazersAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListStargazers");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListStargazers");

            var localVarPath = "./repos/{owner}/{repo}/stargazers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListStargazers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get a commit&#39;s statuses 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;Status&gt;</returns>
        public List<Status> RepoListStatuses (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Status>> localVarResponse = RepoListStatusesWithHttpInfo(owner, repo, sha, sort, state, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a commit&#39;s statuses 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;Status&gt;</returns>
        public ApiResponse<List<Status>> RepoListStatusesWithHttpInfo (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListStatuses");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListStatuses");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoListStatuses");

            var localVarPath = "./repos/{owner}/{repo}/statuses/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Status>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Status>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Status>)));
        }

        /// <summary>
        /// Get a commit&#39;s statuses 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;Status&gt;</returns>
        public async System.Threading.Tasks.Task<List<Status>> RepoListStatusesAsync (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Status>> localVarResponse = await RepoListStatusesAsyncWithHttpInfo(owner, repo, sha, sort, state, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a commit&#39;s statuses 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="sha">sha of the commit</param>
        /// <param name="sort">type of sort (optional)</param>
        /// <param name="state">type of state (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Status&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Status>>> RepoListStatusesAsyncWithHttpInfo (string owner, string repo, string sha, string sort = default(string), string state = default(string), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListStatuses");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListStatuses");
            // verify the required parameter 'sha' is set
            if (sha == null)
                throw new ApiException(400, "Missing required parameter 'sha' when calling RepositoryApi->RepoListStatuses");

            var localVarPath = "./repos/{owner}/{repo}/statuses/{sha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (sha != null) localVarPathParams.Add("sha", this.Configuration.ApiClient.ParameterToString(sha)); // path parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Status>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Status>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Status>)));
        }

        /// <summary>
        /// List a repo&#39;s watchers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> RepoListSubscribers (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = RepoListSubscribersWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repo&#39;s watchers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> RepoListSubscribersWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListSubscribers");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListSubscribers");

            var localVarPath = "./repos/{owner}/{repo}/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List a repo&#39;s watchers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> RepoListSubscribersAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<User>> localVarResponse = await RepoListSubscribersAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repo&#39;s watchers 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> RepoListSubscribersAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListSubscribers");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListSubscribers");

            var localVarPath = "./repos/{owner}/{repo}/subscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<User>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List a repository&#39;s tags 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>List&lt;Tag&gt;</returns>
        public List<Tag> RepoListTags (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Tag>> localVarResponse = RepoListTagsWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repository&#39;s tags 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>ApiResponse of List&lt;Tag&gt;</returns>
        public ApiResponse<List<Tag>> RepoListTagsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListTags");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListTags");

            var localVarPath = "./repos/{owner}/{repo}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// List a repository&#39;s tags 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>Task of List&lt;Tag&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tag>> RepoListTagsAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<Tag>> localVarResponse = await RepoListTagsAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repository&#39;s tags 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results, default maximum page size is 50 (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Tag&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Tag>>> RepoListTagsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListTags");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListTags");

            var localVarPath = "./repos/{owner}/{repo}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Tag>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Tag>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Tag>)));
        }

        /// <summary>
        /// Get list of topics that a repository has 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>TopicName</returns>
        public TopicName RepoListTopics (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<TopicName> localVarResponse = RepoListTopicsWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of topics that a repository has 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of TopicName</returns>
        public ApiResponse<TopicName> RepoListTopicsWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListTopics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListTopics");

            var localVarPath = "./repos/{owner}/{repo}/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopicName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TopicName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopicName)));
        }

        /// <summary>
        /// Get list of topics that a repository has 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of TopicName</returns>
        public async System.Threading.Tasks.Task<TopicName> RepoListTopicsAsync (string owner, string repo, int page = default(int), int limit = default(int))
        {
             ApiResponse<TopicName> localVarResponse = await RepoListTopicsAsyncWithHttpInfo(owner, repo, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of topics that a repository has 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (TopicName)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TopicName>> RepoListTopicsAsyncWithHttpInfo (string owner, string repo, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoListTopics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoListTopics");

            var localVarPath = "./repos/{owner}/{repo}/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoListTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TopicName>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (TopicName) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TopicName)));
        }

        /// <summary>
        /// Merge a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RepoMergePullRequest (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption))
        {
             RepoMergePullRequestWithHttpInfo(owner, repo, index, body);
        }

        /// <summary>
        /// Merge a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoMergePullRequestWithHttpInfo (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoMergePullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoMergePullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoMergePullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMergePullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Merge a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoMergePullRequestAsync (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption))
        {
             await RepoMergePullRequestAsyncWithHttpInfo(owner, repo, index, body);

        }

        /// <summary>
        /// Merge a pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request to merge</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoMergePullRequestAsyncWithHttpInfo (string owner, string repo, long index, MergePullRequestOption body = default(MergePullRequestOption))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoMergePullRequest");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoMergePullRequest");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoMergePullRequest");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMergePullRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Migrate a remote git repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        public Repository RepoMigrate (MigrateRepoForm body = default(MigrateRepoForm))
        {
             ApiResponse<Repository> localVarResponse = RepoMigrateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate a remote git repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> RepoMigrateWithHttpInfo (MigrateRepoForm body = default(MigrateRepoForm))
        {

            var localVarPath = "./repos/migrate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMigrate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Migrate a remote git repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> RepoMigrateAsync (MigrateRepoForm body = default(MigrateRepoForm))
        {
             ApiResponse<Repository> localVarResponse = await RepoMigrateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Migrate a remote git repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> RepoMigrateAsyncWithHttpInfo (MigrateRepoForm body = default(MigrateRepoForm))
        {

            var localVarPath = "./repos/migrate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMigrate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Sync a mirrored repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns></returns>
        public void RepoMirrorSync (string owner, string repo)
        {
             RepoMirrorSyncWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Sync a mirrored repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoMirrorSyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoMirrorSync");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoMirrorSync");

            var localVarPath = "./repos/{owner}/{repo}/mirror-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMirrorSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Sync a mirrored repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoMirrorSyncAsync (string owner, string repo)
        {
             await RepoMirrorSyncAsyncWithHttpInfo(owner, repo);

        }

        /// <summary>
        /// Sync a mirrored repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to sync</param>
        /// <param name="repo">name of the repo to sync</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoMirrorSyncAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoMirrorSync");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoMirrorSync");

            var localVarPath = "./repos/{owner}/{repo}/mirror-sync";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoMirrorSync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if a pull request has been merged 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns></returns>
        public void RepoPullRequestIsMerged (string owner, string repo, long index)
        {
             RepoPullRequestIsMergedWithHttpInfo(owner, repo, index);
        }

        /// <summary>
        /// Check if a pull request has been merged 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoPullRequestIsMergedWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoPullRequestIsMerged");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoPullRequestIsMerged");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoPullRequestIsMerged");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoPullRequestIsMerged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Check if a pull request has been merged 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoPullRequestIsMergedAsync (string owner, string repo, long index)
        {
             await RepoPullRequestIsMergedAsyncWithHttpInfo(owner, repo, index);

        }

        /// <summary>
        /// Check if a pull request has been merged 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoPullRequestIsMergedAsyncWithHttpInfo (string owner, string repo, long index)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoPullRequestIsMerged");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoPullRequestIsMerged");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoPullRequestIsMerged");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoPullRequestIsMerged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Search for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>SearchResults</returns>
        public SearchResults RepoSearch (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<SearchResults> localVarResponse = RepoSearchWithHttpInfo(q, topic, includeDesc, uid, priorityOwnerId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of SearchResults</returns>
        public ApiResponse<SearchResults> RepoSearchWithHttpInfo (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int))
        {

            var localVarPath = "./repos/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (topic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topic", topic)); // query parameter
            if (includeDesc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDesc", includeDesc)); // query parameter
            if (uid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uid", uid)); // query parameter
            if (priorityOwnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority_owner_id", priorityOwnerId)); // query parameter
            if (starredBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starredBy", starredBy)); // query parameter
            if (_private != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "private", _private)); // query parameter
            if (isPrivate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_private", isPrivate)); // query parameter
            if (template != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template", template)); // query parameter
            if (archived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archived", archived)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (exclusive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclusive", exclusive)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResults)));
        }

        /// <summary>
        /// Search for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of SearchResults</returns>
        public async System.Threading.Tasks.Task<SearchResults> RepoSearchAsync (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int))
        {
             ApiResponse<SearchResults> localVarResponse = await RepoSearchAsyncWithHttpInfo(q, topic, includeDesc, uid, priorityOwnerId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keyword (optional)</param>
        /// <param name="topic">Limit search to repositories with keyword as topic (optional)</param>
        /// <param name="includeDesc">include search of keyword within repository description (optional)</param>
        /// <param name="uid">search only for repos that the user with the given id owns or contributes to (optional)</param>
        /// <param name="priorityOwnerId">repo owner to prioritize in the results (optional)</param>
        /// <param name="starredBy">search only for repos that the user with the given id has starred (optional)</param>
        /// <param name="_private">include private repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="isPrivate">show only pubic, private or all repositories (defaults to all) (optional)</param>
        /// <param name="template">include template repositories this user has access to (defaults to true) (optional)</param>
        /// <param name="archived">show only archived, non-archived or all repositories (defaults to all) (optional)</param>
        /// <param name="mode">type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)</param>
        /// <param name="exclusive">if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)</param>
        /// <param name="sort">sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)</param>
        /// <param name="order">sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (SearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResults>> RepoSearchAsyncWithHttpInfo (string q = default(string), bool topic = default(bool), bool includeDesc = default(bool), long uid = default(long), long priorityOwnerId = default(long), long starredBy = default(long), bool _private = default(bool), bool isPrivate = default(bool), bool template = default(bool), bool archived = default(bool), string mode = default(string), bool exclusive = default(bool), string sort = default(string), string order = default(string), int page = default(int), int limit = default(int))
        {

            var localVarPath = "./repos/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (topic != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "topic", topic)); // query parameter
            if (includeDesc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDesc", includeDesc)); // query parameter
            if (uid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uid", uid)); // query parameter
            if (priorityOwnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority_owner_id", priorityOwnerId)); // query parameter
            if (starredBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "starredBy", starredBy)); // query parameter
            if (_private != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "private", _private)); // query parameter
            if (isPrivate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_private", isPrivate)); // query parameter
            if (template != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "template", template)); // query parameter
            if (archived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archived", archived)); // query parameter
            if (mode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mode", mode)); // query parameter
            if (exclusive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclusive", exclusive)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResults)));
        }

        /// <summary>
        /// Get signing-key.gpg for given repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>string</returns>
        public string RepoSigningKey (string owner, string repo)
        {
             ApiResponse<string> localVarResponse = RepoSigningKeyWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signing-key.gpg for given repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> RepoSigningKeyWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoSigningKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoSigningKey");

            var localVarPath = "./repos/{owner}/{repo}/signing-key.gpg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get signing-key.gpg for given repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RepoSigningKeyAsync (string owner, string repo)
        {
             ApiResponse<string> localVarResponse = await RepoSigningKeyAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signing-key.gpg for given repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> RepoSigningKeyAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoSigningKey");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoSigningKey");

            var localVarPath = "./repos/{owner}/{repo}/signing-key.gpg";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSigningKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Submit a pending review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>PullReview</returns>
        public PullReview RepoSubmitPullReview (string owner, string repo, long index, long id, SubmitPullReviewOptions body)
        {
             ApiResponse<PullReview> localVarResponse = RepoSubmitPullReviewWithHttpInfo(owner, repo, index, id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit a pending review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PullReview</returns>
        public ApiResponse<PullReview> RepoSubmitPullReviewWithHttpInfo (string owner, string repo, long index, long id, SubmitPullReviewOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoSubmitPullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSubmitPullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Submit a pending review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>Task of PullReview</returns>
        public async System.Threading.Tasks.Task<PullReview> RepoSubmitPullReviewAsync (string owner, string repo, long index, long id, SubmitPullReviewOptions body)
        {
             ApiResponse<PullReview> localVarResponse = await RepoSubmitPullReviewAsyncWithHttpInfo(owner, repo, index, id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit a pending review to an pull request 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="index">index of the pull request</param>
        /// <param name="id">id of the review</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PullReview)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PullReview>> RepoSubmitPullReviewAsyncWithHttpInfo (string owner, string repo, long index, long id, SubmitPullReviewOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoSubmitPullReview");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoSubmitPullReview");

            var localVarPath = "./repos/{owner}/{repo}/pulls/{index}/reviews/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoSubmitPullReview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PullReview>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PullReview) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PullReview)));
        }

        /// <summary>
        /// Test a push webhook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns></returns>
        public void RepoTestHook (string owner, string repo, long id)
        {
             RepoTestHookWithHttpInfo(owner, repo, id);
        }

        /// <summary>
        /// Test a push webhook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoTestHookWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTestHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTestHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoTestHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}/tests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTestHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Test a push webhook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoTestHookAsync (string owner, string repo, long id)
        {
             await RepoTestHookAsyncWithHttpInfo(owner, repo, id);

        }

        /// <summary>
        /// Test a push webhook 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="id">id of the hook to test</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoTestHookAsyncWithHttpInfo (string owner, string repo, long id)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTestHook");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTestHook");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RepositoryApi->RepoTestHook");

            var localVarPath = "./repos/{owner}/{repo}/hooks/{id}/tests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTestHook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List a repo&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        public List<TrackedTime> RepoTrackedTimes (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<TrackedTime>> localVarResponse = RepoTrackedTimesWithHttpInfo(owner, repo, user, since, before, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a repo&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        public ApiResponse<List<TrackedTime>> RepoTrackedTimesWithHttpInfo (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTrackedTimes");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTrackedTimes");

            var localVarPath = "./repos/{owner}/{repo}/times";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTrackedTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackedTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrackedTime>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// List a repo&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedTime>> RepoTrackedTimesAsync (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
             ApiResponse<List<TrackedTime>> localVarResponse = await RepoTrackedTimesAsyncWithHttpInfo(owner, repo, user, since, before, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a repo&#39;s tracked times 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">optional filter by user (optional)</param>
        /// <param name="since">Only show times updated after the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="before">Only show times updated before the given time. This is a timestamp in RFC 3339 format (optional)</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> RepoTrackedTimesAsyncWithHttpInfo (string owner, string repo, string user = default(string), DateTime since = default(DateTime), DateTime before = default(DateTime), int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTrackedTimes");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTrackedTimes");

            var localVarPath = "./repos/{owner}/{repo}/times";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (user != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user", user)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTrackedTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackedTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrackedTime>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// Transfer a repo ownership 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Repository</returns>
        public Repository RepoTransfer (string owner, string repo, TransferRepoOption body)
        {
             ApiResponse<Repository> localVarResponse = RepoTransferWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a repo ownership 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> RepoTransferWithHttpInfo (string owner, string repo, TransferRepoOption body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTransfer");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTransfer");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoTransfer");

            var localVarPath = "./repos/{owner}/{repo}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Transfer a repo ownership 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> RepoTransferAsync (string owner, string repo, TransferRepoOption body)
        {
             ApiResponse<Repository> localVarResponse = await RepoTransferAsyncWithHttpInfo(owner, repo, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer a repo ownership 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo to transfer</param>
        /// <param name="repo">name of the repo to transfer</param>
        /// <param name="body">Transfer Options</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> RepoTransferAsyncWithHttpInfo (string owner, string repo, TransferRepoOption body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoTransfer");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoTransfer");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoTransfer");

            var localVarPath = "./repos/{owner}/{repo}/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Update a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>FileResponse</returns>
        public FileResponse RepoUpdateFile (string owner, string repo, string filepath, UpdateFileOptions body)
        {
             ApiResponse<FileResponse> localVarResponse = RepoUpdateFileWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FileResponse</returns>
        public ApiResponse<FileResponse> RepoUpdateFileWithHttpInfo (string owner, string repo, string filepath, UpdateFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoUpdateFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoUpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponse)));
        }

        /// <summary>
        /// Update a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>Task of FileResponse</returns>
        public async System.Threading.Tasks.Task<FileResponse> RepoUpdateFileAsync (string owner, string repo, string filepath, UpdateFileOptions body)
        {
             ApiResponse<FileResponse> localVarResponse = await RepoUpdateFileAsyncWithHttpInfo(owner, repo, filepath, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a file in a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="filepath">path of the file to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileResponse>> RepoUpdateFileAsyncWithHttpInfo (string owner, string repo, string filepath, UpdateFileOptions body)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'filepath' is set
            if (filepath == null)
                throw new ApiException(400, "Missing required parameter 'filepath' when calling RepositoryApi->RepoUpdateFile");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RepositoryApi->RepoUpdateFile");

            var localVarPath = "./repos/{owner}/{repo}/contents/{filepath}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (filepath != null) localVarPathParams.Add("filepath", this.Configuration.ApiClient.ParameterToString(filepath)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoUpdateFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (FileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponse)));
        }

        /// <summary>
        /// Replace list of topics for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void RepoUpdateTopics (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions))
        {
             RepoUpdateTopicsWithHttpInfo(owner, repo, body);
        }

        /// <summary>
        /// Replace list of topics for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RepoUpdateTopicsWithHttpInfo (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoUpdateTopics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoUpdateTopics");

            var localVarPath = "./repos/{owner}/{repo}/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoUpdateTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replace list of topics for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RepoUpdateTopicsAsync (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions))
        {
             await RepoUpdateTopicsAsyncWithHttpInfo(owner, repo, body);

        }

        /// <summary>
        /// Replace list of topics for a repository 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RepoUpdateTopicsAsyncWithHttpInfo (string owner, string repo, RepoTopicOptions body = default(RepoTopicOptions))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->RepoUpdateTopics");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->RepoUpdateTopics");

            var localVarPath = "./repos/{owner}/{repo}/topics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/plain"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RepoUpdateTopics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// search topics via keyword 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>List&lt;TopicResponse&gt;</returns>
        public List<TopicResponse> TopicSearch (string q, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<TopicResponse>> localVarResponse = TopicSearchWithHttpInfo(q, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// search topics via keyword 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>ApiResponse of List&lt;TopicResponse&gt;</returns>
        public ApiResponse<List<TopicResponse>> TopicSearchWithHttpInfo (string q, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling RepositoryApi->TopicSearch");

            var localVarPath = "./topics/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TopicSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopicResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TopicResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopicResponse>)));
        }

        /// <summary>
        /// search topics via keyword 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of List&lt;TopicResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<TopicResponse>> TopicSearchAsync (string q, int page = default(int), int limit = default(int))
        {
             ApiResponse<List<TopicResponse>> localVarResponse = await TopicSearchAsyncWithHttpInfo(q, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// search topics via keyword 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">keywords to search</param>
        /// <param name="page">page number of results to return (1-based) (optional)</param>
        /// <param name="limit">page size of results (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TopicResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TopicResponse>>> TopicSearchAsyncWithHttpInfo (string q, int page = default(int), int limit = default(int))
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling RepositoryApi->TopicSearch");

            var localVarPath = "./topics/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TopicSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TopicResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TopicResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TopicResponse>)));
        }

        /// <summary>
        /// Check if the current user is watching a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>WatchInfo</returns>
        public WatchInfo UserCurrentCheckSubscription (string owner, string repo)
        {
             ApiResponse<WatchInfo> localVarResponse = UserCurrentCheckSubscriptionWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the current user is watching a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of WatchInfo</returns>
        public ApiResponse<WatchInfo> UserCurrentCheckSubscriptionWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentCheckSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentCheckSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WatchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchInfo)));
        }

        /// <summary>
        /// Check if the current user is watching a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of WatchInfo</returns>
        public async System.Threading.Tasks.Task<WatchInfo> UserCurrentCheckSubscriptionAsync (string owner, string repo)
        {
             ApiResponse<WatchInfo> localVarResponse = await UserCurrentCheckSubscriptionAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if the current user is watching a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (WatchInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchInfo>> UserCurrentCheckSubscriptionAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentCheckSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentCheckSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WatchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchInfo)));
        }

        /// <summary>
        /// Unwatch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns></returns>
        public void UserCurrentDeleteSubscription (string owner, string repo)
        {
             UserCurrentDeleteSubscriptionWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Unwatch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UserCurrentDeleteSubscriptionWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentDeleteSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentDeleteSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unwatch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteSubscriptionAsync (string owner, string repo)
        {
             await UserCurrentDeleteSubscriptionAsyncWithHttpInfo(owner, repo);

        }

        /// <summary>
        /// Unwatch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UserCurrentDeleteSubscriptionAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentDeleteSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentDeleteSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Watch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>WatchInfo</returns>
        public WatchInfo UserCurrentPutSubscription (string owner, string repo)
        {
             ApiResponse<WatchInfo> localVarResponse = UserCurrentPutSubscriptionWithHttpInfo(owner, repo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Watch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of WatchInfo</returns>
        public ApiResponse<WatchInfo> UserCurrentPutSubscriptionWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentPutSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentPutSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WatchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchInfo)));
        }

        /// <summary>
        /// Watch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of WatchInfo</returns>
        public async System.Threading.Tasks.Task<WatchInfo> UserCurrentPutSubscriptionAsync (string owner, string repo)
        {
             ApiResponse<WatchInfo> localVarResponse = await UserCurrentPutSubscriptionAsyncWithHttpInfo(owner, repo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Watch a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse (WatchInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WatchInfo>> UserCurrentPutSubscriptionAsyncWithHttpInfo (string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserCurrentPutSubscription");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserCurrentPutSubscription");

            var localVarPath = "./repos/{owner}/{repo}/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WatchInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (WatchInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WatchInfo)));
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        public List<TrackedTime> UserTrackedTimes (string owner, string repo, string user)
        {
             ApiResponse<List<TrackedTime>> localVarResponse = UserTrackedTimesWithHttpInfo(owner, repo, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        public ApiResponse<List<TrackedTime>> UserTrackedTimesWithHttpInfo (string owner, string repo, string user)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserTrackedTimes");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserTrackedTimes");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling RepositoryApi->UserTrackedTimes");

            var localVarPath = "./repos/{owner}/{repo}/times/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTrackedTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackedTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrackedTime>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedTime>> UserTrackedTimesAsync (string owner, string repo, string user)
        {
             ApiResponse<List<TrackedTime>> localVarResponse = await UserTrackedTimesAsyncWithHttpInfo(owner, repo, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserTrackedTimesAsyncWithHttpInfo (string owner, string repo, string user)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling RepositoryApi->UserTrackedTimes");
            // verify the required parameter 'repo' is set
            if (repo == null)
                throw new ApiException(400, "Missing required parameter 'repo' when calling RepositoryApi->UserTrackedTimes");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling RepositoryApi->UserTrackedTimes");

            var localVarPath = "./repos/{owner}/{repo}/times/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repo != null) localVarPathParams.Add("repo", this.Configuration.ApiClient.ParameterToString(repo)); // path parameter
            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTrackedTimes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TrackedTime>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<TrackedTime>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

    }
}
