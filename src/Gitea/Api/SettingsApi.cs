/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Gitea.Client;
using Gitea.Model;

namespace Gitea.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get instance&#39;s global settings for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralRepoSettings</returns>
        GeneralRepoSettings GetGeneralRepositorySettings ();

        /// <summary>
        /// Get instance&#39;s global settings for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralRepoSettings</returns>
        ApiResponse<GeneralRepoSettings> GetGeneralRepositorySettingsWithHttpInfo ();
        /// <summary>
        /// Get instance&#39;s global settings for ui
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralUISettings</returns>
        GeneralUISettings GetGeneralUISettings ();

        /// <summary>
        /// Get instance&#39;s global settings for ui
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralUISettings</returns>
        ApiResponse<GeneralUISettings> GetGeneralUISettingsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get instance&#39;s global settings for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralRepoSettings</returns>
        System.Threading.Tasks.Task<GeneralRepoSettings> GetGeneralRepositorySettingsAsync ();

        /// <summary>
        /// Get instance&#39;s global settings for repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralRepoSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneralRepoSettings>> GetGeneralRepositorySettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get instance&#39;s global settings for ui
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralUISettings</returns>
        System.Threading.Tasks.Task<GeneralUISettings> GetGeneralUISettingsAsync ();

        /// <summary>
        /// Get instance&#39;s global settings for ui
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralUISettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<GeneralUISettings>> GetGeneralUISettingsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private Gitea.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = new Gitea.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SettingsApi()
        {
            this.Configuration = Gitea.Client.Configuration.Default;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(Gitea.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Gitea.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Gitea.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Gitea.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Gitea.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get instance&#39;s global settings for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralRepoSettings</returns>
        public GeneralRepoSettings GetGeneralRepositorySettings ()
        {
             ApiResponse<GeneralRepoSettings> localVarResponse = GetGeneralRepositorySettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get instance&#39;s global settings for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralRepoSettings</returns>
        public ApiResponse<GeneralRepoSettings> GetGeneralRepositorySettingsWithHttpInfo ()
        {

            var localVarPath = "./settings/repository";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralRepositorySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralRepoSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GeneralRepoSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralRepoSettings)));
        }

        /// <summary>
        /// Get instance&#39;s global settings for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralRepoSettings</returns>
        public async System.Threading.Tasks.Task<GeneralRepoSettings> GetGeneralRepositorySettingsAsync ()
        {
             ApiResponse<GeneralRepoSettings> localVarResponse = await GetGeneralRepositorySettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get instance&#39;s global settings for repositories 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralRepoSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeneralRepoSettings>> GetGeneralRepositorySettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./settings/repository";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralRepositorySettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralRepoSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GeneralRepoSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralRepoSettings)));
        }

        /// <summary>
        /// Get instance&#39;s global settings for ui 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GeneralUISettings</returns>
        public GeneralUISettings GetGeneralUISettings ()
        {
             ApiResponse<GeneralUISettings> localVarResponse = GetGeneralUISettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get instance&#39;s global settings for ui 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GeneralUISettings</returns>
        public ApiResponse<GeneralUISettings> GetGeneralUISettingsWithHttpInfo ()
        {

            var localVarPath = "./settings/ui";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralUISettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralUISettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GeneralUISettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralUISettings)));
        }

        /// <summary>
        /// Get instance&#39;s global settings for ui 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GeneralUISettings</returns>
        public async System.Threading.Tasks.Task<GeneralUISettings> GetGeneralUISettingsAsync ()
        {
             ApiResponse<GeneralUISettings> localVarResponse = await GetGeneralUISettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get instance&#39;s global settings for ui 
        /// </summary>
        /// <exception cref="Gitea.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GeneralUISettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GeneralUISettings>> GetGeneralUISettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./settings/ui";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (AccessToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "access_token", this.Configuration.GetApiKeyWithPrefix("access_token")));
            }
            // authentication (AuthorizationHeaderToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (SudoHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Sudo")))
            {
                localVarHeaderParams["Sudo"] = this.Configuration.GetApiKeyWithPrefix("Sudo");
            }
            // authentication (SudoParam) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sudo")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sudo", this.Configuration.GetApiKeyWithPrefix("sudo")));
            }
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGeneralUISettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GeneralUISettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GeneralUISettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GeneralUISettings)));
        }

    }
}
