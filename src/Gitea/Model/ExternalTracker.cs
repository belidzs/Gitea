/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// ExternalTracker represents settings for external tracker
    /// </summary>
    [DataContract]
    public partial class ExternalTracker :  IEquatable<ExternalTracker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalTracker" /> class.
        /// </summary>
        /// <param name="externalTrackerFormat">External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index..</param>
        /// <param name="externalTrackerStyle">External Issue Tracker Number Format, either &#x60;numeric&#x60; or &#x60;alphanumeric&#x60;.</param>
        /// <param name="externalTrackerUrl">URL of external issue tracker..</param>
        public ExternalTracker(string externalTrackerFormat = default(string), string externalTrackerStyle = default(string), string externalTrackerUrl = default(string))
        {
            this.ExternalTrackerFormat = externalTrackerFormat;
            this.ExternalTrackerStyle = externalTrackerStyle;
            this.ExternalTrackerUrl = externalTrackerUrl;
        }
        
        /// <summary>
        /// External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
        /// </summary>
        /// <value>External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.</value>
        [DataMember(Name="external_tracker_format", EmitDefaultValue=false)]
        public string ExternalTrackerFormat { get; set; }

        /// <summary>
        /// External Issue Tracker Number Format, either &#x60;numeric&#x60; or &#x60;alphanumeric&#x60;
        /// </summary>
        /// <value>External Issue Tracker Number Format, either &#x60;numeric&#x60; or &#x60;alphanumeric&#x60;</value>
        [DataMember(Name="external_tracker_style", EmitDefaultValue=false)]
        public string ExternalTrackerStyle { get; set; }

        /// <summary>
        /// URL of external issue tracker.
        /// </summary>
        /// <value>URL of external issue tracker.</value>
        [DataMember(Name="external_tracker_url", EmitDefaultValue=false)]
        public string ExternalTrackerUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalTracker {\n");
            sb.Append("  ExternalTrackerFormat: ").Append(ExternalTrackerFormat).Append("\n");
            sb.Append("  ExternalTrackerStyle: ").Append(ExternalTrackerStyle).Append("\n");
            sb.Append("  ExternalTrackerUrl: ").Append(ExternalTrackerUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExternalTracker);
        }

        /// <summary>
        /// Returns true if ExternalTracker instances are equal
        /// </summary>
        /// <param name="input">Instance of ExternalTracker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalTracker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalTrackerFormat == input.ExternalTrackerFormat ||
                    (this.ExternalTrackerFormat != null &&
                    this.ExternalTrackerFormat.Equals(input.ExternalTrackerFormat))
                ) && 
                (
                    this.ExternalTrackerStyle == input.ExternalTrackerStyle ||
                    (this.ExternalTrackerStyle != null &&
                    this.ExternalTrackerStyle.Equals(input.ExternalTrackerStyle))
                ) && 
                (
                    this.ExternalTrackerUrl == input.ExternalTrackerUrl ||
                    (this.ExternalTrackerUrl != null &&
                    this.ExternalTrackerUrl.Equals(input.ExternalTrackerUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalTrackerFormat != null)
                    hashCode = hashCode * 59 + this.ExternalTrackerFormat.GetHashCode();
                if (this.ExternalTrackerStyle != null)
                    hashCode = hashCode * 59 + this.ExternalTrackerStyle.GetHashCode();
                if (this.ExternalTrackerUrl != null)
                    hashCode = hashCode * 59 + this.ExternalTrackerUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
