/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateOAuth2ApplicationOptions holds options to create an oauth2 application
    /// </summary>
    [DataContract]
    public partial class CreateOAuth2ApplicationOptions :  IEquatable<CreateOAuth2ApplicationOptions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOAuth2ApplicationOptions" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="redirectUris">redirectUris.</param>
        public CreateOAuth2ApplicationOptions(string name = default(string), List<string> redirectUris = default(List<string>))
        {
            this.Name = name;
            this.RedirectUris = redirectUris;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [DataMember(Name="redirect_uris", EmitDefaultValue=false)]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOAuth2ApplicationOptions {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOAuth2ApplicationOptions);
        }

        /// <summary>
        /// Returns true if CreateOAuth2ApplicationOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOAuth2ApplicationOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOAuth2ApplicationOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RedirectUris == input.RedirectUris ||
                    this.RedirectUris != null &&
                    input.RedirectUris != null &&
                    this.RedirectUris.SequenceEqual(input.RedirectUris)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RedirectUris != null)
                    hashCode = hashCode * 59 + this.RedirectUris.GetHashCode();
                return hashCode;
            }
        }
    }

}
