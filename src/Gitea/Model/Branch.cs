/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// Branch represents a repository branch
    /// </summary>
    [DataContract]
    public partial class Branch :  IEquatable<Branch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Branch" /> class.
        /// </summary>
        /// <param name="commit">commit.</param>
        /// <param name="effectiveBranchProtectionName">effectiveBranchProtectionName.</param>
        /// <param name="enableStatusCheck">enableStatusCheck.</param>
        /// <param name="name">name.</param>
        /// <param name="_protected">_protected.</param>
        /// <param name="requiredApprovals">requiredApprovals.</param>
        /// <param name="statusCheckContexts">statusCheckContexts.</param>
        /// <param name="userCanMerge">userCanMerge.</param>
        /// <param name="userCanPush">userCanPush.</param>
        public Branch(PayloadCommit commit = default(PayloadCommit), string effectiveBranchProtectionName = default(string), bool enableStatusCheck = default(bool), string name = default(string), bool _protected = default(bool), long requiredApprovals = default(long), List<string> statusCheckContexts = default(List<string>), bool userCanMerge = default(bool), bool userCanPush = default(bool))
        {
            this.Commit = commit;
            this.EffectiveBranchProtectionName = effectiveBranchProtectionName;
            this.EnableStatusCheck = enableStatusCheck;
            this.Name = name;
            this.Protected = _protected;
            this.RequiredApprovals = requiredApprovals;
            this.StatusCheckContexts = statusCheckContexts;
            this.UserCanMerge = userCanMerge;
            this.UserCanPush = userCanPush;
        }
        
        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name="commit", EmitDefaultValue=false)]
        public PayloadCommit Commit { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveBranchProtectionName
        /// </summary>
        [DataMember(Name="effective_branch_protection_name", EmitDefaultValue=false)]
        public string EffectiveBranchProtectionName { get; set; }

        /// <summary>
        /// Gets or Sets EnableStatusCheck
        /// </summary>
        [DataMember(Name="enable_status_check", EmitDefaultValue=false)]
        public bool EnableStatusCheck { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Protected
        /// </summary>
        [DataMember(Name="protected", EmitDefaultValue=false)]
        public bool Protected { get; set; }

        /// <summary>
        /// Gets or Sets RequiredApprovals
        /// </summary>
        [DataMember(Name="required_approvals", EmitDefaultValue=false)]
        public long RequiredApprovals { get; set; }

        /// <summary>
        /// Gets or Sets StatusCheckContexts
        /// </summary>
        [DataMember(Name="status_check_contexts", EmitDefaultValue=false)]
        public List<string> StatusCheckContexts { get; set; }

        /// <summary>
        /// Gets or Sets UserCanMerge
        /// </summary>
        [DataMember(Name="user_can_merge", EmitDefaultValue=false)]
        public bool UserCanMerge { get; set; }

        /// <summary>
        /// Gets or Sets UserCanPush
        /// </summary>
        [DataMember(Name="user_can_push", EmitDefaultValue=false)]
        public bool UserCanPush { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Branch {\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  EffectiveBranchProtectionName: ").Append(EffectiveBranchProtectionName).Append("\n");
            sb.Append("  EnableStatusCheck: ").Append(EnableStatusCheck).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Protected: ").Append(Protected).Append("\n");
            sb.Append("  RequiredApprovals: ").Append(RequiredApprovals).Append("\n");
            sb.Append("  StatusCheckContexts: ").Append(StatusCheckContexts).Append("\n");
            sb.Append("  UserCanMerge: ").Append(UserCanMerge).Append("\n");
            sb.Append("  UserCanPush: ").Append(UserCanPush).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Branch);
        }

        /// <summary>
        /// Returns true if Branch instances are equal
        /// </summary>
        /// <param name="input">Instance of Branch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Branch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Commit == input.Commit ||
                    (this.Commit != null &&
                    this.Commit.Equals(input.Commit))
                ) && 
                (
                    this.EffectiveBranchProtectionName == input.EffectiveBranchProtectionName ||
                    (this.EffectiveBranchProtectionName != null &&
                    this.EffectiveBranchProtectionName.Equals(input.EffectiveBranchProtectionName))
                ) && 
                (
                    this.EnableStatusCheck == input.EnableStatusCheck ||
                    (this.EnableStatusCheck != null &&
                    this.EnableStatusCheck.Equals(input.EnableStatusCheck))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Protected == input.Protected ||
                    (this.Protected != null &&
                    this.Protected.Equals(input.Protected))
                ) && 
                (
                    this.RequiredApprovals == input.RequiredApprovals ||
                    (this.RequiredApprovals != null &&
                    this.RequiredApprovals.Equals(input.RequiredApprovals))
                ) && 
                (
                    this.StatusCheckContexts == input.StatusCheckContexts ||
                    this.StatusCheckContexts != null &&
                    input.StatusCheckContexts != null &&
                    this.StatusCheckContexts.SequenceEqual(input.StatusCheckContexts)
                ) && 
                (
                    this.UserCanMerge == input.UserCanMerge ||
                    (this.UserCanMerge != null &&
                    this.UserCanMerge.Equals(input.UserCanMerge))
                ) && 
                (
                    this.UserCanPush == input.UserCanPush ||
                    (this.UserCanPush != null &&
                    this.UserCanPush.Equals(input.UserCanPush))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Commit != null)
                    hashCode = hashCode * 59 + this.Commit.GetHashCode();
                if (this.EffectiveBranchProtectionName != null)
                    hashCode = hashCode * 59 + this.EffectiveBranchProtectionName.GetHashCode();
                if (this.EnableStatusCheck != null)
                    hashCode = hashCode * 59 + this.EnableStatusCheck.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Protected != null)
                    hashCode = hashCode * 59 + this.Protected.GetHashCode();
                if (this.RequiredApprovals != null)
                    hashCode = hashCode * 59 + this.RequiredApprovals.GetHashCode();
                if (this.StatusCheckContexts != null)
                    hashCode = hashCode * 59 + this.StatusCheckContexts.GetHashCode();
                if (this.UserCanMerge != null)
                    hashCode = hashCode * 59 + this.UserCanMerge.GetHashCode();
                if (this.UserCanPush != null)
                    hashCode = hashCode * 59 + this.UserCanPush.GetHashCode();
                return hashCode;
            }
        }
    }

}
