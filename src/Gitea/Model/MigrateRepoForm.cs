/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// MigrateRepoForm form for migrating repository
    /// </summary>
    [DataContract]
    public partial class MigrateRepoForm :  IEquatable<MigrateRepoForm>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateRepoForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MigrateRepoForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateRepoForm" /> class.
        /// </summary>
        /// <param name="authPassword">authPassword.</param>
        /// <param name="authUsername">authUsername.</param>
        /// <param name="cloneAddr">cloneAddr (required).</param>
        /// <param name="description">description.</param>
        /// <param name="issues">issues.</param>
        /// <param name="labels">labels.</param>
        /// <param name="milestones">milestones.</param>
        /// <param name="mirror">mirror.</param>
        /// <param name="_private">_private.</param>
        /// <param name="pullRequests">pullRequests.</param>
        /// <param name="releases">releases.</param>
        /// <param name="repoName">repoName (required).</param>
        /// <param name="uid">uid (required).</param>
        /// <param name="wiki">wiki.</param>
        public MigrateRepoForm(string authPassword = default(string), string authUsername = default(string), string cloneAddr = default(string), string description = default(string), bool issues = default(bool), bool labels = default(bool), bool milestones = default(bool), bool mirror = default(bool), bool _private = default(bool), bool pullRequests = default(bool), bool releases = default(bool), string repoName = default(string), long uid = default(long), bool wiki = default(bool))
        {
            // to ensure "cloneAddr" is required (not null)
            if (cloneAddr == null)
            {
                throw new InvalidDataException("cloneAddr is a required property for MigrateRepoForm and cannot be null");
            }
            else
            {
                this.CloneAddr = cloneAddr;
            }
            
            // to ensure "repoName" is required (not null)
            if (repoName == null)
            {
                throw new InvalidDataException("repoName is a required property for MigrateRepoForm and cannot be null");
            }
            else
            {
                this.RepoName = repoName;
            }
            
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new InvalidDataException("uid is a required property for MigrateRepoForm and cannot be null");
            }
            else
            {
                this.Uid = uid;
            }
            
            this.AuthPassword = authPassword;
            this.AuthUsername = authUsername;
            this.Description = description;
            this.Issues = issues;
            this.Labels = labels;
            this.Milestones = milestones;
            this.Mirror = mirror;
            this.Private = _private;
            this.PullRequests = pullRequests;
            this.Releases = releases;
            this.Wiki = wiki;
        }
        
        /// <summary>
        /// Gets or Sets AuthPassword
        /// </summary>
        [DataMember(Name="auth_password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsername
        /// </summary>
        [DataMember(Name="auth_username", EmitDefaultValue=false)]
        public string AuthUsername { get; set; }

        /// <summary>
        /// Gets or Sets CloneAddr
        /// </summary>
        [DataMember(Name="clone_addr", EmitDefaultValue=false)]
        public string CloneAddr { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public bool Issues { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public bool Labels { get; set; }

        /// <summary>
        /// Gets or Sets Milestones
        /// </summary>
        [DataMember(Name="milestones", EmitDefaultValue=false)]
        public bool Milestones { get; set; }

        /// <summary>
        /// Gets or Sets Mirror
        /// </summary>
        [DataMember(Name="mirror", EmitDefaultValue=false)]
        public bool Mirror { get; set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool Private { get; set; }

        /// <summary>
        /// Gets or Sets PullRequests
        /// </summary>
        [DataMember(Name="pull_requests", EmitDefaultValue=false)]
        public bool PullRequests { get; set; }

        /// <summary>
        /// Gets or Sets Releases
        /// </summary>
        [DataMember(Name="releases", EmitDefaultValue=false)]
        public bool Releases { get; set; }

        /// <summary>
        /// Gets or Sets RepoName
        /// </summary>
        [DataMember(Name="repo_name", EmitDefaultValue=false)]
        public string RepoName { get; set; }

        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public long Uid { get; set; }

        /// <summary>
        /// Gets or Sets Wiki
        /// </summary>
        [DataMember(Name="wiki", EmitDefaultValue=false)]
        public bool Wiki { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MigrateRepoForm {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthUsername: ").Append(AuthUsername).Append("\n");
            sb.Append("  CloneAddr: ").Append(CloneAddr).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Milestones: ").Append(Milestones).Append("\n");
            sb.Append("  Mirror: ").Append(Mirror).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  PullRequests: ").Append(PullRequests).Append("\n");
            sb.Append("  Releases: ").Append(Releases).Append("\n");
            sb.Append("  RepoName: ").Append(RepoName).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Wiki: ").Append(Wiki).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MigrateRepoForm);
        }

        /// <summary>
        /// Returns true if MigrateRepoForm instances are equal
        /// </summary>
        /// <param name="input">Instance of MigrateRepoForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrateRepoForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthUsername == input.AuthUsername ||
                    (this.AuthUsername != null &&
                    this.AuthUsername.Equals(input.AuthUsername))
                ) && 
                (
                    this.CloneAddr == input.CloneAddr ||
                    (this.CloneAddr != null &&
                    this.CloneAddr.Equals(input.CloneAddr))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Issues == input.Issues ||
                    (this.Issues != null &&
                    this.Issues.Equals(input.Issues))
                ) && 
                (
                    this.Labels == input.Labels ||
                    (this.Labels != null &&
                    this.Labels.Equals(input.Labels))
                ) && 
                (
                    this.Milestones == input.Milestones ||
                    (this.Milestones != null &&
                    this.Milestones.Equals(input.Milestones))
                ) && 
                (
                    this.Mirror == input.Mirror ||
                    (this.Mirror != null &&
                    this.Mirror.Equals(input.Mirror))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.PullRequests == input.PullRequests ||
                    (this.PullRequests != null &&
                    this.PullRequests.Equals(input.PullRequests))
                ) && 
                (
                    this.Releases == input.Releases ||
                    (this.Releases != null &&
                    this.Releases.Equals(input.Releases))
                ) && 
                (
                    this.RepoName == input.RepoName ||
                    (this.RepoName != null &&
                    this.RepoName.Equals(input.RepoName))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Wiki == input.Wiki ||
                    (this.Wiki != null &&
                    this.Wiki.Equals(input.Wiki))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthUsername != null)
                    hashCode = hashCode * 59 + this.AuthUsername.GetHashCode();
                if (this.CloneAddr != null)
                    hashCode = hashCode * 59 + this.CloneAddr.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Issues != null)
                    hashCode = hashCode * 59 + this.Issues.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Milestones != null)
                    hashCode = hashCode * 59 + this.Milestones.GetHashCode();
                if (this.Mirror != null)
                    hashCode = hashCode * 59 + this.Mirror.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.PullRequests != null)
                    hashCode = hashCode * 59 + this.PullRequests.GetHashCode();
                if (this.Releases != null)
                    hashCode = hashCode * 59 + this.Releases.GetHashCode();
                if (this.RepoName != null)
                    hashCode = hashCode * 59 + this.RepoName.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Wiki != null)
                    hashCode = hashCode * 59 + this.Wiki.GetHashCode();
                return hashCode;
            }
        }
    }

}
