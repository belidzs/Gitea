/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// FileLinksResponse contains the links for a repo&#39;s file
    /// </summary>
    [DataContract]
    public partial class FileLinksResponse :  IEquatable<FileLinksResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileLinksResponse" /> class.
        /// </summary>
        /// <param name="git">git.</param>
        /// <param name="html">html.</param>
        /// <param name="self">self.</param>
        public FileLinksResponse(string git = default(string), string html = default(string), string self = default(string))
        {
            this.Git = git;
            this.Html = html;
            this.Self = self;
        }
        
        /// <summary>
        /// Gets or Sets Git
        /// </summary>
        [DataMember(Name="git", EmitDefaultValue=false)]
        public string Git { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name="html", EmitDefaultValue=false)]
        public string Html { get; set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileLinksResponse {\n");
            sb.Append("  Git: ").Append(Git).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileLinksResponse);
        }

        /// <summary>
        /// Returns true if FileLinksResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FileLinksResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileLinksResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Git == input.Git ||
                    (this.Git != null &&
                    this.Git.Equals(input.Git))
                ) && 
                (
                    this.Html == input.Html ||
                    (this.Html != null &&
                    this.Html.Equals(input.Html))
                ) && 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Git != null)
                    hashCode = hashCode * 59 + this.Git.GetHashCode();
                if (this.Html != null)
                    hashCode = hashCode * 59 + this.Html.GetHashCode();
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                return hashCode;
            }
        }
    }

}
