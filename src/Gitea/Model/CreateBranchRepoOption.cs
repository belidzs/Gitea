/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateBranchRepoOption options when creating a branch in a repository
    /// </summary>
    [DataContract]
    public partial class CreateBranchRepoOption :  IEquatable<CreateBranchRepoOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranchRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateBranchRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBranchRepoOption" /> class.
        /// </summary>
        /// <param name="newBranchName">Name of the branch to create (required).</param>
        /// <param name="oldBranchName">Name of the old branch to create from.</param>
        public CreateBranchRepoOption(string newBranchName = default(string), string oldBranchName = default(string))
        {
            // to ensure "newBranchName" is required (not null)
            if (newBranchName == null)
            {
                throw new InvalidDataException("newBranchName is a required property for CreateBranchRepoOption and cannot be null");
            }
            else
            {
                this.NewBranchName = newBranchName;
            }
            
            this.OldBranchName = oldBranchName;
        }
        
        /// <summary>
        /// Name of the branch to create
        /// </summary>
        /// <value>Name of the branch to create</value>
        [DataMember(Name="new_branch_name", EmitDefaultValue=false)]
        public string NewBranchName { get; set; }

        /// <summary>
        /// Name of the old branch to create from
        /// </summary>
        /// <value>Name of the old branch to create from</value>
        [DataMember(Name="old_branch_name", EmitDefaultValue=false)]
        public string OldBranchName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateBranchRepoOption {\n");
            sb.Append("  NewBranchName: ").Append(NewBranchName).Append("\n");
            sb.Append("  OldBranchName: ").Append(OldBranchName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBranchRepoOption);
        }

        /// <summary>
        /// Returns true if CreateBranchRepoOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBranchRepoOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBranchRepoOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewBranchName == input.NewBranchName ||
                    (this.NewBranchName != null &&
                    this.NewBranchName.Equals(input.NewBranchName))
                ) && 
                (
                    this.OldBranchName == input.OldBranchName ||
                    (this.OldBranchName != null &&
                    this.OldBranchName.Equals(input.OldBranchName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewBranchName != null)
                    hashCode = hashCode * 59 + this.NewBranchName.GetHashCode();
                if (this.OldBranchName != null)
                    hashCode = hashCode * 59 + this.OldBranchName.GetHashCode();
                return hashCode;
            }
        }
    }

}
