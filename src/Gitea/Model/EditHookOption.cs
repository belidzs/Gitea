/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// EditHookOption options when modify one hook
    /// </summary>
    [DataContract]
    public partial class EditHookOption :  IEquatable<EditHookOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditHookOption" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="branchFilter">branchFilter.</param>
        /// <param name="config">config.</param>
        /// <param name="events">events.</param>
        public EditHookOption(bool active = default(bool), string branchFilter = default(string), Dictionary<string, string> config = default(Dictionary<string, string>), List<string> events = default(List<string>))
        {
            this.Active = active;
            this.BranchFilter = branchFilter;
            this.Config = config;
            this.Events = events;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets BranchFilter
        /// </summary>
        [DataMember(Name="branch_filter", EmitDefaultValue=false)]
        public string BranchFilter { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Dictionary<string, string> Config { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<string> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditHookOption {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BranchFilter: ").Append(BranchFilter).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditHookOption);
        }

        /// <summary>
        /// Returns true if EditHookOption instances are equal
        /// </summary>
        /// <param name="input">Instance of EditHookOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditHookOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.BranchFilter == input.BranchFilter ||
                    (this.BranchFilter != null &&
                    this.BranchFilter.Equals(input.BranchFilter))
                ) && 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.BranchFilter != null)
                    hashCode = hashCode * 59 + this.BranchFilter.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }
    }

}
