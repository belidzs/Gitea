/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// MarkdownOption markdown options
    /// </summary>
    [DataContract]
    public partial class MarkdownOption :  IEquatable<MarkdownOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkdownOption" /> class.
        /// </summary>
        /// <param name="context">Context to render  in: body.</param>
        /// <param name="mode">Mode to render  in: body.</param>
        /// <param name="text">Text markdown to render  in: body.</param>
        /// <param name="wiki">Is it a wiki page ?  in: body.</param>
        public MarkdownOption(string context = default(string), string mode = default(string), string text = default(string), bool wiki = default(bool))
        {
            this.Context = context;
            this.Mode = mode;
            this.Text = text;
            this.Wiki = wiki;
        }
        
        /// <summary>
        /// Context to render  in: body
        /// </summary>
        /// <value>Context to render  in: body</value>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Mode to render  in: body
        /// </summary>
        /// <value>Mode to render  in: body</value>
        [DataMember(Name="Mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Text markdown to render  in: body
        /// </summary>
        /// <value>Text markdown to render  in: body</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Is it a wiki page ?  in: body
        /// </summary>
        /// <value>Is it a wiki page ?  in: body</value>
        [DataMember(Name="Wiki", EmitDefaultValue=false)]
        public bool Wiki { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarkdownOption {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Wiki: ").Append(Wiki).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkdownOption);
        }

        /// <summary>
        /// Returns true if MarkdownOption instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkdownOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkdownOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Wiki == input.Wiki ||
                    (this.Wiki != null &&
                    this.Wiki.Equals(input.Wiki))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Wiki != null)
                    hashCode = hashCode * 59 + this.Wiki.GetHashCode();
                return hashCode;
            }
        }
    }

}
