/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// EditRepoOption options when editing a repository&#39;s properties
    /// </summary>
    [DataContract]
    public partial class EditRepoOption :  IEquatable<EditRepoOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditRepoOption" /> class.
        /// </summary>
        /// <param name="allowMergeCommits">either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;..</param>
        /// <param name="allowRebase">either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;..</param>
        /// <param name="allowRebaseExplicit">either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;..</param>
        /// <param name="allowSquashMerge">either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;..</param>
        /// <param name="archived">set to &#x60;true&#x60; to archive this repository..</param>
        /// <param name="defaultBranch">sets the default branch for this repository..</param>
        /// <param name="description">a short description of the repository..</param>
        /// <param name="externalTracker">externalTracker.</param>
        /// <param name="externalWiki">externalWiki.</param>
        /// <param name="hasIssues">either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them..</param>
        /// <param name="hasPullRequests">either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request..</param>
        /// <param name="hasWiki">either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it..</param>
        /// <param name="ignoreWhitespaceConflicts">either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;..</param>
        /// <param name="internalTracker">internalTracker.</param>
        /// <param name="name">name of the repository.</param>
        /// <param name="_private">either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private..</param>
        /// <param name="template">either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository.</param>
        /// <param name="website">a URL with more information about the repository..</param>
        public EditRepoOption(bool allowMergeCommits = default(bool), bool allowRebase = default(bool), bool allowRebaseExplicit = default(bool), bool allowSquashMerge = default(bool), bool archived = default(bool), string defaultBranch = default(string), string description = default(string), ExternalTracker externalTracker = default(ExternalTracker), ExternalWiki externalWiki = default(ExternalWiki), bool hasIssues = default(bool), bool hasPullRequests = default(bool), bool hasWiki = default(bool), bool ignoreWhitespaceConflicts = default(bool), InternalTracker internalTracker = default(InternalTracker), string name = default(string), bool _private = default(bool), bool template = default(bool), string website = default(string))
        {
            this.AllowMergeCommits = allowMergeCommits;
            this.AllowRebase = allowRebase;
            this.AllowRebaseExplicit = allowRebaseExplicit;
            this.AllowSquashMerge = allowSquashMerge;
            this.Archived = archived;
            this.DefaultBranch = defaultBranch;
            this.Description = description;
            this.ExternalTracker = externalTracker;
            this.ExternalWiki = externalWiki;
            this.HasIssues = hasIssues;
            this.HasPullRequests = hasPullRequests;
            this.HasWiki = hasWiki;
            this.IgnoreWhitespaceConflicts = ignoreWhitespaceConflicts;
            this.InternalTracker = internalTracker;
            this.Name = name;
            this.Private = _private;
            this.Template = template;
            this.Website = website;
        }
        
        /// <summary>
        /// either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.</value>
        [DataMember(Name="allow_merge_commits", EmitDefaultValue=false)]
        public bool AllowMergeCommits { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.</value>
        [DataMember(Name="allow_rebase", EmitDefaultValue=false)]
        public bool AllowRebase { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow rebase with explicit merge commits (- -no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.</value>
        [DataMember(Name="allow_rebase_explicit", EmitDefaultValue=false)]
        public bool AllowRebaseExplicit { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.</value>
        [DataMember(Name="allow_squash_merge", EmitDefaultValue=false)]
        public bool AllowSquashMerge { get; set; }

        /// <summary>
        /// set to &#x60;true&#x60; to archive this repository.
        /// </summary>
        /// <value>set to &#x60;true&#x60; to archive this repository.</value>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool Archived { get; set; }

        /// <summary>
        /// sets the default branch for this repository.
        /// </summary>
        /// <value>sets the default branch for this repository.</value>
        [DataMember(Name="default_branch", EmitDefaultValue=false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// a short description of the repository.
        /// </summary>
        /// <value>a short description of the repository.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExternalTracker
        /// </summary>
        [DataMember(Name="external_tracker", EmitDefaultValue=false)]
        public ExternalTracker ExternalTracker { get; set; }

        /// <summary>
        /// Gets or Sets ExternalWiki
        /// </summary>
        [DataMember(Name="external_wiki", EmitDefaultValue=false)]
        public ExternalWiki ExternalWiki { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.</value>
        [DataMember(Name="has_issues", EmitDefaultValue=false)]
        public bool HasIssues { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request.
        /// </summary>
        /// <value>either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request.</value>
        [DataMember(Name="has_pull_requests", EmitDefaultValue=false)]
        public bool HasPullRequests { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.
        /// </summary>
        /// <value>either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.</value>
        [DataMember(Name="has_wiki", EmitDefaultValue=false)]
        public bool HasWiki { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.
        /// </summary>
        /// <value>either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace. &#x60;has_pull_requests&#x60; must be &#x60;true&#x60;.</value>
        [DataMember(Name="ignore_whitespace_conflicts", EmitDefaultValue=false)]
        public bool IgnoreWhitespaceConflicts { get; set; }

        /// <summary>
        /// Gets or Sets InternalTracker
        /// </summary>
        [DataMember(Name="internal_tracker", EmitDefaultValue=false)]
        public InternalTracker InternalTracker { get; set; }

        /// <summary>
        /// name of the repository
        /// </summary>
        /// <value>name of the repository</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
        /// </summary>
        /// <value>either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool Private { get; set; }

        /// <summary>
        /// either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository
        /// </summary>
        /// <value>either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public bool Template { get; set; }

        /// <summary>
        /// a URL with more information about the repository.
        /// </summary>
        /// <value>a URL with more information about the repository.</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditRepoOption {\n");
            sb.Append("  AllowMergeCommits: ").Append(AllowMergeCommits).Append("\n");
            sb.Append("  AllowRebase: ").Append(AllowRebase).Append("\n");
            sb.Append("  AllowRebaseExplicit: ").Append(AllowRebaseExplicit).Append("\n");
            sb.Append("  AllowSquashMerge: ").Append(AllowSquashMerge).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalTracker: ").Append(ExternalTracker).Append("\n");
            sb.Append("  ExternalWiki: ").Append(ExternalWiki).Append("\n");
            sb.Append("  HasIssues: ").Append(HasIssues).Append("\n");
            sb.Append("  HasPullRequests: ").Append(HasPullRequests).Append("\n");
            sb.Append("  HasWiki: ").Append(HasWiki).Append("\n");
            sb.Append("  IgnoreWhitespaceConflicts: ").Append(IgnoreWhitespaceConflicts).Append("\n");
            sb.Append("  InternalTracker: ").Append(InternalTracker).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditRepoOption);
        }

        /// <summary>
        /// Returns true if EditRepoOption instances are equal
        /// </summary>
        /// <param name="input">Instance of EditRepoOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditRepoOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowMergeCommits == input.AllowMergeCommits ||
                    (this.AllowMergeCommits != null &&
                    this.AllowMergeCommits.Equals(input.AllowMergeCommits))
                ) && 
                (
                    this.AllowRebase == input.AllowRebase ||
                    (this.AllowRebase != null &&
                    this.AllowRebase.Equals(input.AllowRebase))
                ) && 
                (
                    this.AllowRebaseExplicit == input.AllowRebaseExplicit ||
                    (this.AllowRebaseExplicit != null &&
                    this.AllowRebaseExplicit.Equals(input.AllowRebaseExplicit))
                ) && 
                (
                    this.AllowSquashMerge == input.AllowSquashMerge ||
                    (this.AllowSquashMerge != null &&
                    this.AllowSquashMerge.Equals(input.AllowSquashMerge))
                ) && 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.DefaultBranch == input.DefaultBranch ||
                    (this.DefaultBranch != null &&
                    this.DefaultBranch.Equals(input.DefaultBranch))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExternalTracker == input.ExternalTracker ||
                    (this.ExternalTracker != null &&
                    this.ExternalTracker.Equals(input.ExternalTracker))
                ) && 
                (
                    this.ExternalWiki == input.ExternalWiki ||
                    (this.ExternalWiki != null &&
                    this.ExternalWiki.Equals(input.ExternalWiki))
                ) && 
                (
                    this.HasIssues == input.HasIssues ||
                    (this.HasIssues != null &&
                    this.HasIssues.Equals(input.HasIssues))
                ) && 
                (
                    this.HasPullRequests == input.HasPullRequests ||
                    (this.HasPullRequests != null &&
                    this.HasPullRequests.Equals(input.HasPullRequests))
                ) && 
                (
                    this.HasWiki == input.HasWiki ||
                    (this.HasWiki != null &&
                    this.HasWiki.Equals(input.HasWiki))
                ) && 
                (
                    this.IgnoreWhitespaceConflicts == input.IgnoreWhitespaceConflicts ||
                    (this.IgnoreWhitespaceConflicts != null &&
                    this.IgnoreWhitespaceConflicts.Equals(input.IgnoreWhitespaceConflicts))
                ) && 
                (
                    this.InternalTracker == input.InternalTracker ||
                    (this.InternalTracker != null &&
                    this.InternalTracker.Equals(input.InternalTracker))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowMergeCommits != null)
                    hashCode = hashCode * 59 + this.AllowMergeCommits.GetHashCode();
                if (this.AllowRebase != null)
                    hashCode = hashCode * 59 + this.AllowRebase.GetHashCode();
                if (this.AllowRebaseExplicit != null)
                    hashCode = hashCode * 59 + this.AllowRebaseExplicit.GetHashCode();
                if (this.AllowSquashMerge != null)
                    hashCode = hashCode * 59 + this.AllowSquashMerge.GetHashCode();
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.DefaultBranch != null)
                    hashCode = hashCode * 59 + this.DefaultBranch.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExternalTracker != null)
                    hashCode = hashCode * 59 + this.ExternalTracker.GetHashCode();
                if (this.ExternalWiki != null)
                    hashCode = hashCode * 59 + this.ExternalWiki.GetHashCode();
                if (this.HasIssues != null)
                    hashCode = hashCode * 59 + this.HasIssues.GetHashCode();
                if (this.HasPullRequests != null)
                    hashCode = hashCode * 59 + this.HasPullRequests.GetHashCode();
                if (this.HasWiki != null)
                    hashCode = hashCode * 59 + this.HasWiki.GetHashCode();
                if (this.IgnoreWhitespaceConflicts != null)
                    hashCode = hashCode * 59 + this.IgnoreWhitespaceConflicts.GetHashCode();
                if (this.InternalTracker != null)
                    hashCode = hashCode * 59 + this.InternalTracker.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }
    }

}
