/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateOrgOption options for creating an organization
    /// </summary>
    [DataContract]
    public partial class CreateOrgOption :  IEquatable<CreateOrgOption>
    {
        /// <summary>
        /// possible values are &#x60;public&#x60; (default), &#x60;limited&#x60; or &#x60;private&#x60;
        /// </summary>
        /// <value>possible values are &#x60;public&#x60; (default), &#x60;limited&#x60; or &#x60;private&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,

            /// <summary>
            /// Enum Limited for value: limited
            /// </summary>
            [EnumMember(Value = "limited")]
            Limited = 2,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 3

        }

        /// <summary>
        /// possible values are &#x60;public&#x60; (default), &#x60;limited&#x60; or &#x60;private&#x60;
        /// </summary>
        /// <value>possible values are &#x60;public&#x60; (default), &#x60;limited&#x60; or &#x60;private&#x60;</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public VisibilityEnum? Visibility { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrgOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrgOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrgOption" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="location">location.</param>
        /// <param name="repoAdminChangeTeamAccess">repoAdminChangeTeamAccess.</param>
        /// <param name="username">username (required).</param>
        /// <param name="visibility">possible values are &#x60;public&#x60; (default), &#x60;limited&#x60; or &#x60;private&#x60;.</param>
        /// <param name="website">website.</param>
        public CreateOrgOption(string description = default(string), string fullName = default(string), string location = default(string), bool repoAdminChangeTeamAccess = default(bool), string username = default(string), VisibilityEnum? visibility = default(VisibilityEnum?), string website = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for CreateOrgOption and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            
            this.Description = description;
            this.FullName = fullName;
            this.Location = location;
            this.RepoAdminChangeTeamAccess = repoAdminChangeTeamAccess;
            this.Visibility = visibility;
            this.Website = website;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets RepoAdminChangeTeamAccess
        /// </summary>
        [DataMember(Name="repo_admin_change_team_access", EmitDefaultValue=false)]
        public bool RepoAdminChangeTeamAccess { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }


        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrgOption {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RepoAdminChangeTeamAccess: ").Append(RepoAdminChangeTeamAccess).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrgOption);
        }

        /// <summary>
        /// Returns true if CreateOrgOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrgOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrgOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.RepoAdminChangeTeamAccess == input.RepoAdminChangeTeamAccess ||
                    (this.RepoAdminChangeTeamAccess != null &&
                    this.RepoAdminChangeTeamAccess.Equals(input.RepoAdminChangeTeamAccess))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Visibility == input.Visibility ||
                    (this.Visibility != null &&
                    this.Visibility.Equals(input.Visibility))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.RepoAdminChangeTeamAccess != null)
                    hashCode = hashCode * 59 + this.RepoAdminChangeTeamAccess.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Visibility != null)
                    hashCode = hashCode * 59 + this.Visibility.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }
    }

}
