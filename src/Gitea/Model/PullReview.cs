/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// PullReview represents a pull request review
    /// </summary>
    [DataContract]
    public partial class PullReview :  IEquatable<PullReview>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullReview" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="commentsCount">commentsCount.</param>
        /// <param name="commitId">commitId.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="official">official.</param>
        /// <param name="pullRequestUrl">pullRequestUrl.</param>
        /// <param name="stale">stale.</param>
        /// <param name="state">ReviewStateType review state type.</param>
        /// <param name="submittedAt">submittedAt.</param>
        /// <param name="user">user.</param>
        public PullReview(string body = default(string), long commentsCount = default(long), string commitId = default(string), string htmlUrl = default(string), long id = default(long), bool official = default(bool), string pullRequestUrl = default(string), bool stale = default(bool), string state = default(string), DateTime submittedAt = default(DateTime), User user = default(User))
        {
            this.Body = body;
            this.CommentsCount = commentsCount;
            this.CommitId = commitId;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.Official = official;
            this.PullRequestUrl = pullRequestUrl;
            this.Stale = stale;
            this.State = state;
            this.SubmittedAt = submittedAt;
            this.User = user;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name="comments_count", EmitDefaultValue=false)]
        public long CommentsCount { get; set; }

        /// <summary>
        /// Gets or Sets CommitId
        /// </summary>
        [DataMember(Name="commit_id", EmitDefaultValue=false)]
        public string CommitId { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name="html_url", EmitDefaultValue=false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Official
        /// </summary>
        [DataMember(Name="official", EmitDefaultValue=false)]
        public bool Official { get; set; }

        /// <summary>
        /// Gets or Sets PullRequestUrl
        /// </summary>
        [DataMember(Name="pull_request_url", EmitDefaultValue=false)]
        public string PullRequestUrl { get; set; }

        /// <summary>
        /// Gets or Sets Stale
        /// </summary>
        [DataMember(Name="stale", EmitDefaultValue=false)]
        public bool Stale { get; set; }

        /// <summary>
        /// ReviewStateType review state type
        /// </summary>
        /// <value>ReviewStateType review state type</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets SubmittedAt
        /// </summary>
        [DataMember(Name="submitted_at", EmitDefaultValue=false)]
        public DateTime SubmittedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PullReview {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  CommitId: ").Append(CommitId).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Official: ").Append(Official).Append("\n");
            sb.Append("  PullRequestUrl: ").Append(PullRequestUrl).Append("\n");
            sb.Append("  Stale: ").Append(Stale).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubmittedAt: ").Append(SubmittedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PullReview);
        }

        /// <summary>
        /// Returns true if PullReview instances are equal
        /// </summary>
        /// <param name="input">Instance of PullReview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullReview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.CommentsCount == input.CommentsCount ||
                    (this.CommentsCount != null &&
                    this.CommentsCount.Equals(input.CommentsCount))
                ) && 
                (
                    this.CommitId == input.CommitId ||
                    (this.CommitId != null &&
                    this.CommitId.Equals(input.CommitId))
                ) && 
                (
                    this.HtmlUrl == input.HtmlUrl ||
                    (this.HtmlUrl != null &&
                    this.HtmlUrl.Equals(input.HtmlUrl))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Official == input.Official ||
                    (this.Official != null &&
                    this.Official.Equals(input.Official))
                ) && 
                (
                    this.PullRequestUrl == input.PullRequestUrl ||
                    (this.PullRequestUrl != null &&
                    this.PullRequestUrl.Equals(input.PullRequestUrl))
                ) && 
                (
                    this.Stale == input.Stale ||
                    (this.Stale != null &&
                    this.Stale.Equals(input.Stale))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SubmittedAt == input.SubmittedAt ||
                    (this.SubmittedAt != null &&
                    this.SubmittedAt.Equals(input.SubmittedAt))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.CommentsCount != null)
                    hashCode = hashCode * 59 + this.CommentsCount.GetHashCode();
                if (this.CommitId != null)
                    hashCode = hashCode * 59 + this.CommitId.GetHashCode();
                if (this.HtmlUrl != null)
                    hashCode = hashCode * 59 + this.HtmlUrl.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Official != null)
                    hashCode = hashCode * 59 + this.Official.GetHashCode();
                if (this.PullRequestUrl != null)
                    hashCode = hashCode * 59 + this.PullRequestUrl.GetHashCode();
                if (this.Stale != null)
                    hashCode = hashCode * 59 + this.Stale.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SubmittedAt != null)
                    hashCode = hashCode * 59 + this.SubmittedAt.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }
    }

}
