/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// GeneralRepoSettings contains global repository settings exposed by API
    /// </summary>
    [DataContract]
    public partial class GeneralRepoSettings :  IEquatable<GeneralRepoSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralRepoSettings" /> class.
        /// </summary>
        /// <param name="httpGitDisabled">httpGitDisabled.</param>
        /// <param name="mirrorsDisabled">mirrorsDisabled.</param>
        public GeneralRepoSettings(bool httpGitDisabled = default(bool), bool mirrorsDisabled = default(bool))
        {
            this.HttpGitDisabled = httpGitDisabled;
            this.MirrorsDisabled = mirrorsDisabled;
        }
        
        /// <summary>
        /// Gets or Sets HttpGitDisabled
        /// </summary>
        [DataMember(Name="http_git_disabled", EmitDefaultValue=false)]
        public bool HttpGitDisabled { get; set; }

        /// <summary>
        /// Gets or Sets MirrorsDisabled
        /// </summary>
        [DataMember(Name="mirrors_disabled", EmitDefaultValue=false)]
        public bool MirrorsDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralRepoSettings {\n");
            sb.Append("  HttpGitDisabled: ").Append(HttpGitDisabled).Append("\n");
            sb.Append("  MirrorsDisabled: ").Append(MirrorsDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralRepoSettings);
        }

        /// <summary>
        /// Returns true if GeneralRepoSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralRepoSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralRepoSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HttpGitDisabled == input.HttpGitDisabled ||
                    (this.HttpGitDisabled != null &&
                    this.HttpGitDisabled.Equals(input.HttpGitDisabled))
                ) && 
                (
                    this.MirrorsDisabled == input.MirrorsDisabled ||
                    (this.MirrorsDisabled != null &&
                    this.MirrorsDisabled.Equals(input.MirrorsDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HttpGitDisabled != null)
                    hashCode = hashCode * 59 + this.HttpGitDisabled.GetHashCode();
                if (this.MirrorsDisabled != null)
                    hashCode = hashCode * 59 + this.MirrorsDisabled.GetHashCode();
                return hashCode;
            }
        }
    }

}
