/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// EditUserOption edit user options
    /// </summary>
    [DataContract]
    public partial class EditUserOption :  IEquatable<EditUserOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditUserOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditUserOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditUserOption" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="admin">admin.</param>
        /// <param name="allowCreateOrganization">allowCreateOrganization.</param>
        /// <param name="allowGitHook">allowGitHook.</param>
        /// <param name="allowImportLocal">allowImportLocal.</param>
        /// <param name="email">email (required).</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="location">location.</param>
        /// <param name="loginName">loginName.</param>
        /// <param name="maxRepoCreation">maxRepoCreation.</param>
        /// <param name="mustChangePassword">mustChangePassword.</param>
        /// <param name="password">password.</param>
        /// <param name="prohibitLogin">prohibitLogin.</param>
        /// <param name="sourceId">sourceId.</param>
        /// <param name="website">website.</param>
        public EditUserOption(bool active = default(bool), bool admin = default(bool), bool allowCreateOrganization = default(bool), bool allowGitHook = default(bool), bool allowImportLocal = default(bool), string email = default(string), string fullName = default(string), string location = default(string), string loginName = default(string), long maxRepoCreation = default(long), bool mustChangePassword = default(bool), string password = default(string), bool prohibitLogin = default(bool), long sourceId = default(long), string website = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for EditUserOption and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            
            this.Active = active;
            this.Admin = admin;
            this.AllowCreateOrganization = allowCreateOrganization;
            this.AllowGitHook = allowGitHook;
            this.AllowImportLocal = allowImportLocal;
            this.FullName = fullName;
            this.Location = location;
            this.LoginName = loginName;
            this.MaxRepoCreation = maxRepoCreation;
            this.MustChangePassword = mustChangePassword;
            this.Password = password;
            this.ProhibitLogin = prohibitLogin;
            this.SourceId = sourceId;
            this.Website = website;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=false)]
        public bool Admin { get; set; }

        /// <summary>
        /// Gets or Sets AllowCreateOrganization
        /// </summary>
        [DataMember(Name="allow_create_organization", EmitDefaultValue=false)]
        public bool AllowCreateOrganization { get; set; }

        /// <summary>
        /// Gets or Sets AllowGitHook
        /// </summary>
        [DataMember(Name="allow_git_hook", EmitDefaultValue=false)]
        public bool AllowGitHook { get; set; }

        /// <summary>
        /// Gets or Sets AllowImportLocal
        /// </summary>
        [DataMember(Name="allow_import_local", EmitDefaultValue=false)]
        public bool AllowImportLocal { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name="login_name", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets MaxRepoCreation
        /// </summary>
        [DataMember(Name="max_repo_creation", EmitDefaultValue=false)]
        public long MaxRepoCreation { get; set; }

        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [DataMember(Name="must_change_password", EmitDefaultValue=false)]
        public bool MustChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets ProhibitLogin
        /// </summary>
        [DataMember(Name="prohibit_login", EmitDefaultValue=false)]
        public bool ProhibitLogin { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public long SourceId { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditUserOption {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  AllowCreateOrganization: ").Append(AllowCreateOrganization).Append("\n");
            sb.Append("  AllowGitHook: ").Append(AllowGitHook).Append("\n");
            sb.Append("  AllowImportLocal: ").Append(AllowImportLocal).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  MaxRepoCreation: ").Append(MaxRepoCreation).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ProhibitLogin: ").Append(ProhibitLogin).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditUserOption);
        }

        /// <summary>
        /// Returns true if EditUserOption instances are equal
        /// </summary>
        /// <param name="input">Instance of EditUserOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditUserOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Admin == input.Admin ||
                    (this.Admin != null &&
                    this.Admin.Equals(input.Admin))
                ) && 
                (
                    this.AllowCreateOrganization == input.AllowCreateOrganization ||
                    (this.AllowCreateOrganization != null &&
                    this.AllowCreateOrganization.Equals(input.AllowCreateOrganization))
                ) && 
                (
                    this.AllowGitHook == input.AllowGitHook ||
                    (this.AllowGitHook != null &&
                    this.AllowGitHook.Equals(input.AllowGitHook))
                ) && 
                (
                    this.AllowImportLocal == input.AllowImportLocal ||
                    (this.AllowImportLocal != null &&
                    this.AllowImportLocal.Equals(input.AllowImportLocal))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.MaxRepoCreation == input.MaxRepoCreation ||
                    (this.MaxRepoCreation != null &&
                    this.MaxRepoCreation.Equals(input.MaxRepoCreation))
                ) && 
                (
                    this.MustChangePassword == input.MustChangePassword ||
                    (this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(input.MustChangePassword))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ProhibitLogin == input.ProhibitLogin ||
                    (this.ProhibitLogin != null &&
                    this.ProhibitLogin.Equals(input.ProhibitLogin))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Admin != null)
                    hashCode = hashCode * 59 + this.Admin.GetHashCode();
                if (this.AllowCreateOrganization != null)
                    hashCode = hashCode * 59 + this.AllowCreateOrganization.GetHashCode();
                if (this.AllowGitHook != null)
                    hashCode = hashCode * 59 + this.AllowGitHook.GetHashCode();
                if (this.AllowImportLocal != null)
                    hashCode = hashCode * 59 + this.AllowImportLocal.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.MaxRepoCreation != null)
                    hashCode = hashCode * 59 + this.MaxRepoCreation.GetHashCode();
                if (this.MustChangePassword != null)
                    hashCode = hashCode * 59 + this.MustChangePassword.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ProhibitLogin != null)
                    hashCode = hashCode * 59 + this.ProhibitLogin.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }
    }

}
