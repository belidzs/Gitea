/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateRepoOption options when creating repository
    /// </summary>
    [DataContract]
    public partial class CreateRepoOption :  IEquatable<CreateRepoOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepoOption" /> class.
        /// </summary>
        /// <param name="autoInit">Whether the repository should be auto-intialized?.</param>
        /// <param name="defaultBranch">DefaultBranch of the repository (used when initializes and in template).</param>
        /// <param name="description">Description of the repository to create.</param>
        /// <param name="gitignores">Gitignores to use.</param>
        /// <param name="issueLabels">Issue Label set to use.</param>
        /// <param name="license">License to use.</param>
        /// <param name="name">Name of the repository to create (required).</param>
        /// <param name="_private">Whether the repository is private.</param>
        /// <param name="readme">Readme of the repository to create.</param>
        public CreateRepoOption(bool autoInit = default(bool), string defaultBranch = default(string), string description = default(string), string gitignores = default(string), string issueLabels = default(string), string license = default(string), string name = default(string), bool _private = default(bool), string readme = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateRepoOption and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            this.AutoInit = autoInit;
            this.DefaultBranch = defaultBranch;
            this.Description = description;
            this.Gitignores = gitignores;
            this.IssueLabels = issueLabels;
            this.License = license;
            this.Private = _private;
            this.Readme = readme;
        }
        
        /// <summary>
        /// Whether the repository should be auto-intialized?
        /// </summary>
        /// <value>Whether the repository should be auto-intialized?</value>
        [DataMember(Name="auto_init", EmitDefaultValue=false)]
        public bool AutoInit { get; set; }

        /// <summary>
        /// DefaultBranch of the repository (used when initializes and in template)
        /// </summary>
        /// <value>DefaultBranch of the repository (used when initializes and in template)</value>
        [DataMember(Name="default_branch", EmitDefaultValue=false)]
        public string DefaultBranch { get; set; }

        /// <summary>
        /// Description of the repository to create
        /// </summary>
        /// <value>Description of the repository to create</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gitignores to use
        /// </summary>
        /// <value>Gitignores to use</value>
        [DataMember(Name="gitignores", EmitDefaultValue=false)]
        public string Gitignores { get; set; }

        /// <summary>
        /// Issue Label set to use
        /// </summary>
        /// <value>Issue Label set to use</value>
        [DataMember(Name="issue_labels", EmitDefaultValue=false)]
        public string IssueLabels { get; set; }

        /// <summary>
        /// License to use
        /// </summary>
        /// <value>License to use</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string License { get; set; }

        /// <summary>
        /// Name of the repository to create
        /// </summary>
        /// <value>Name of the repository to create</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the repository is private
        /// </summary>
        /// <value>Whether the repository is private</value>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool Private { get; set; }

        /// <summary>
        /// Readme of the repository to create
        /// </summary>
        /// <value>Readme of the repository to create</value>
        [DataMember(Name="readme", EmitDefaultValue=false)]
        public string Readme { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRepoOption {\n");
            sb.Append("  AutoInit: ").Append(AutoInit).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gitignores: ").Append(Gitignores).Append("\n");
            sb.Append("  IssueLabels: ").Append(IssueLabels).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  Readme: ").Append(Readme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRepoOption);
        }

        /// <summary>
        /// Returns true if CreateRepoOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRepoOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRepoOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoInit == input.AutoInit ||
                    (this.AutoInit != null &&
                    this.AutoInit.Equals(input.AutoInit))
                ) && 
                (
                    this.DefaultBranch == input.DefaultBranch ||
                    (this.DefaultBranch != null &&
                    this.DefaultBranch.Equals(input.DefaultBranch))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Gitignores == input.Gitignores ||
                    (this.Gitignores != null &&
                    this.Gitignores.Equals(input.Gitignores))
                ) && 
                (
                    this.IssueLabels == input.IssueLabels ||
                    (this.IssueLabels != null &&
                    this.IssueLabels.Equals(input.IssueLabels))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.Readme == input.Readme ||
                    (this.Readme != null &&
                    this.Readme.Equals(input.Readme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoInit != null)
                    hashCode = hashCode * 59 + this.AutoInit.GetHashCode();
                if (this.DefaultBranch != null)
                    hashCode = hashCode * 59 + this.DefaultBranch.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Gitignores != null)
                    hashCode = hashCode * 59 + this.Gitignores.GetHashCode();
                if (this.IssueLabels != null)
                    hashCode = hashCode * 59 + this.IssueLabels.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.Readme != null)
                    hashCode = hashCode * 59 + this.Readme.GetHashCode();
                return hashCode;
            }
        }
    }

}
