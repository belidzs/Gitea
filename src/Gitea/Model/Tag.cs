/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// Tag represents a repository tag
    /// </summary>
    [DataContract]
    public partial class Tag :  IEquatable<Tag>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag" /> class.
        /// </summary>
        /// <param name="commit">commit.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="tarballUrl">tarballUrl.</param>
        /// <param name="zipballUrl">zipballUrl.</param>
        public Tag(CommitMeta commit = default(CommitMeta), string id = default(string), string name = default(string), string tarballUrl = default(string), string zipballUrl = default(string))
        {
            this.Commit = commit;
            this.Id = id;
            this.Name = name;
            this.TarballUrl = tarballUrl;
            this.ZipballUrl = zipballUrl;
        }
        
        /// <summary>
        /// Gets or Sets Commit
        /// </summary>
        [DataMember(Name="commit", EmitDefaultValue=false)]
        public CommitMeta Commit { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TarballUrl
        /// </summary>
        [DataMember(Name="tarball_url", EmitDefaultValue=false)]
        public string TarballUrl { get; set; }

        /// <summary>
        /// Gets or Sets ZipballUrl
        /// </summary>
        [DataMember(Name="zipball_url", EmitDefaultValue=false)]
        public string ZipballUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tag {\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TarballUrl: ").Append(TarballUrl).Append("\n");
            sb.Append("  ZipballUrl: ").Append(ZipballUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tag);
        }

        /// <summary>
        /// Returns true if Tag instances are equal
        /// </summary>
        /// <param name="input">Instance of Tag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Commit == input.Commit ||
                    (this.Commit != null &&
                    this.Commit.Equals(input.Commit))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TarballUrl == input.TarballUrl ||
                    (this.TarballUrl != null &&
                    this.TarballUrl.Equals(input.TarballUrl))
                ) && 
                (
                    this.ZipballUrl == input.ZipballUrl ||
                    (this.ZipballUrl != null &&
                    this.ZipballUrl.Equals(input.ZipballUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Commit != null)
                    hashCode = hashCode * 59 + this.Commit.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TarballUrl != null)
                    hashCode = hashCode * 59 + this.TarballUrl.GetHashCode();
                if (this.ZipballUrl != null)
                    hashCode = hashCode * 59 + this.ZipballUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
