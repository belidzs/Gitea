/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// UserHeatmapData represents the data needed to create a heatmap
    /// </summary>
    [DataContract]
    public partial class UserHeatmapData :  IEquatable<UserHeatmapData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserHeatmapData" /> class.
        /// </summary>
        /// <param name="contributions">contributions.</param>
        /// <param name="timestamp">TimeStamp defines a timestamp.</param>
        public UserHeatmapData(long contributions = default(long), long timestamp = default(long))
        {
            this.Contributions = contributions;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Contributions
        /// </summary>
        [DataMember(Name="contributions", EmitDefaultValue=false)]
        public long Contributions { get; set; }

        /// <summary>
        /// TimeStamp defines a timestamp
        /// </summary>
        /// <value>TimeStamp defines a timestamp</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserHeatmapData {\n");
            sb.Append("  Contributions: ").Append(Contributions).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserHeatmapData);
        }

        /// <summary>
        /// Returns true if UserHeatmapData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserHeatmapData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserHeatmapData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contributions == input.Contributions ||
                    (this.Contributions != null &&
                    this.Contributions.Equals(input.Contributions))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contributions != null)
                    hashCode = hashCode * 59 + this.Contributions.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
