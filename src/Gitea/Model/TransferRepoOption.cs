/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// TransferRepoOption options when transfer a repository&#39;s ownership
    /// </summary>
    [DataContract]
    public partial class TransferRepoOption :  IEquatable<TransferRepoOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRepoOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferRepoOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferRepoOption" /> class.
        /// </summary>
        /// <param name="newOwner">newOwner (required).</param>
        /// <param name="teamIds">ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories..</param>
        public TransferRepoOption(string newOwner = default(string), List<long> teamIds = default(List<long>))
        {
            // to ensure "newOwner" is required (not null)
            if (newOwner == null)
            {
                throw new InvalidDataException("newOwner is a required property for TransferRepoOption and cannot be null");
            }
            else
            {
                this.NewOwner = newOwner;
            }
            
            this.TeamIds = teamIds;
        }
        
        /// <summary>
        /// Gets or Sets NewOwner
        /// </summary>
        [DataMember(Name="new_owner", EmitDefaultValue=false)]
        public string NewOwner { get; set; }

        /// <summary>
        /// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
        /// </summary>
        /// <value>ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.</value>
        [DataMember(Name="team_ids", EmitDefaultValue=false)]
        public List<long> TeamIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransferRepoOption {\n");
            sb.Append("  NewOwner: ").Append(NewOwner).Append("\n");
            sb.Append("  TeamIds: ").Append(TeamIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferRepoOption);
        }

        /// <summary>
        /// Returns true if TransferRepoOption instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferRepoOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferRepoOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewOwner == input.NewOwner ||
                    (this.NewOwner != null &&
                    this.NewOwner.Equals(input.NewOwner))
                ) && 
                (
                    this.TeamIds == input.TeamIds ||
                    this.TeamIds != null &&
                    input.TeamIds != null &&
                    this.TeamIds.SequenceEqual(input.TeamIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewOwner != null)
                    hashCode = hashCode * 59 + this.NewOwner.GetHashCode();
                if (this.TeamIds != null)
                    hashCode = hashCode * 59 + this.TeamIds.GetHashCode();
                return hashCode;
            }
        }
    }

}
