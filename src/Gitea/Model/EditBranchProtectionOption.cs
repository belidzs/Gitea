/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// EditBranchProtectionOption options for editing a branch protection
    /// </summary>
    [DataContract]
    public partial class EditBranchProtectionOption :  IEquatable<EditBranchProtectionOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditBranchProtectionOption" /> class.
        /// </summary>
        /// <param name="approvalsWhitelistTeams">approvalsWhitelistTeams.</param>
        /// <param name="approvalsWhitelistUsername">approvalsWhitelistUsername.</param>
        /// <param name="blockOnOutdatedBranch">blockOnOutdatedBranch.</param>
        /// <param name="blockOnRejectedReviews">blockOnRejectedReviews.</param>
        /// <param name="dismissStaleApprovals">dismissStaleApprovals.</param>
        /// <param name="enableApprovalsWhitelist">enableApprovalsWhitelist.</param>
        /// <param name="enableMergeWhitelist">enableMergeWhitelist.</param>
        /// <param name="enablePush">enablePush.</param>
        /// <param name="enablePushWhitelist">enablePushWhitelist.</param>
        /// <param name="enableStatusCheck">enableStatusCheck.</param>
        /// <param name="mergeWhitelistTeams">mergeWhitelistTeams.</param>
        /// <param name="mergeWhitelistUsernames">mergeWhitelistUsernames.</param>
        /// <param name="protectedFilePatterns">protectedFilePatterns.</param>
        /// <param name="pushWhitelistDeployKeys">pushWhitelistDeployKeys.</param>
        /// <param name="pushWhitelistTeams">pushWhitelistTeams.</param>
        /// <param name="pushWhitelistUsernames">pushWhitelistUsernames.</param>
        /// <param name="requireSignedCommits">requireSignedCommits.</param>
        /// <param name="requiredApprovals">requiredApprovals.</param>
        /// <param name="statusCheckContexts">statusCheckContexts.</param>
        public EditBranchProtectionOption(List<string> approvalsWhitelistTeams = default(List<string>), List<string> approvalsWhitelistUsername = default(List<string>), bool blockOnOutdatedBranch = default(bool), bool blockOnRejectedReviews = default(bool), bool dismissStaleApprovals = default(bool), bool enableApprovalsWhitelist = default(bool), bool enableMergeWhitelist = default(bool), bool enablePush = default(bool), bool enablePushWhitelist = default(bool), bool enableStatusCheck = default(bool), List<string> mergeWhitelistTeams = default(List<string>), List<string> mergeWhitelistUsernames = default(List<string>), string protectedFilePatterns = default(string), bool pushWhitelistDeployKeys = default(bool), List<string> pushWhitelistTeams = default(List<string>), List<string> pushWhitelistUsernames = default(List<string>), bool requireSignedCommits = default(bool), long requiredApprovals = default(long), List<string> statusCheckContexts = default(List<string>))
        {
            this.ApprovalsWhitelistTeams = approvalsWhitelistTeams;
            this.ApprovalsWhitelistUsername = approvalsWhitelistUsername;
            this.BlockOnOutdatedBranch = blockOnOutdatedBranch;
            this.BlockOnRejectedReviews = blockOnRejectedReviews;
            this.DismissStaleApprovals = dismissStaleApprovals;
            this.EnableApprovalsWhitelist = enableApprovalsWhitelist;
            this.EnableMergeWhitelist = enableMergeWhitelist;
            this.EnablePush = enablePush;
            this.EnablePushWhitelist = enablePushWhitelist;
            this.EnableStatusCheck = enableStatusCheck;
            this.MergeWhitelistTeams = mergeWhitelistTeams;
            this.MergeWhitelistUsernames = mergeWhitelistUsernames;
            this.ProtectedFilePatterns = protectedFilePatterns;
            this.PushWhitelistDeployKeys = pushWhitelistDeployKeys;
            this.PushWhitelistTeams = pushWhitelistTeams;
            this.PushWhitelistUsernames = pushWhitelistUsernames;
            this.RequireSignedCommits = requireSignedCommits;
            this.RequiredApprovals = requiredApprovals;
            this.StatusCheckContexts = statusCheckContexts;
        }
        
        /// <summary>
        /// Gets or Sets ApprovalsWhitelistTeams
        /// </summary>
        [DataMember(Name="approvals_whitelist_teams", EmitDefaultValue=false)]
        public List<string> ApprovalsWhitelistTeams { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalsWhitelistUsername
        /// </summary>
        [DataMember(Name="approvals_whitelist_username", EmitDefaultValue=false)]
        public List<string> ApprovalsWhitelistUsername { get; set; }

        /// <summary>
        /// Gets or Sets BlockOnOutdatedBranch
        /// </summary>
        [DataMember(Name="block_on_outdated_branch", EmitDefaultValue=false)]
        public bool BlockOnOutdatedBranch { get; set; }

        /// <summary>
        /// Gets or Sets BlockOnRejectedReviews
        /// </summary>
        [DataMember(Name="block_on_rejected_reviews", EmitDefaultValue=false)]
        public bool BlockOnRejectedReviews { get; set; }

        /// <summary>
        /// Gets or Sets DismissStaleApprovals
        /// </summary>
        [DataMember(Name="dismiss_stale_approvals", EmitDefaultValue=false)]
        public bool DismissStaleApprovals { get; set; }

        /// <summary>
        /// Gets or Sets EnableApprovalsWhitelist
        /// </summary>
        [DataMember(Name="enable_approvals_whitelist", EmitDefaultValue=false)]
        public bool EnableApprovalsWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets EnableMergeWhitelist
        /// </summary>
        [DataMember(Name="enable_merge_whitelist", EmitDefaultValue=false)]
        public bool EnableMergeWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets EnablePush
        /// </summary>
        [DataMember(Name="enable_push", EmitDefaultValue=false)]
        public bool EnablePush { get; set; }

        /// <summary>
        /// Gets or Sets EnablePushWhitelist
        /// </summary>
        [DataMember(Name="enable_push_whitelist", EmitDefaultValue=false)]
        public bool EnablePushWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets EnableStatusCheck
        /// </summary>
        [DataMember(Name="enable_status_check", EmitDefaultValue=false)]
        public bool EnableStatusCheck { get; set; }

        /// <summary>
        /// Gets or Sets MergeWhitelistTeams
        /// </summary>
        [DataMember(Name="merge_whitelist_teams", EmitDefaultValue=false)]
        public List<string> MergeWhitelistTeams { get; set; }

        /// <summary>
        /// Gets or Sets MergeWhitelistUsernames
        /// </summary>
        [DataMember(Name="merge_whitelist_usernames", EmitDefaultValue=false)]
        public List<string> MergeWhitelistUsernames { get; set; }

        /// <summary>
        /// Gets or Sets ProtectedFilePatterns
        /// </summary>
        [DataMember(Name="protected_file_patterns", EmitDefaultValue=false)]
        public string ProtectedFilePatterns { get; set; }

        /// <summary>
        /// Gets or Sets PushWhitelistDeployKeys
        /// </summary>
        [DataMember(Name="push_whitelist_deploy_keys", EmitDefaultValue=false)]
        public bool PushWhitelistDeployKeys { get; set; }

        /// <summary>
        /// Gets or Sets PushWhitelistTeams
        /// </summary>
        [DataMember(Name="push_whitelist_teams", EmitDefaultValue=false)]
        public List<string> PushWhitelistTeams { get; set; }

        /// <summary>
        /// Gets or Sets PushWhitelistUsernames
        /// </summary>
        [DataMember(Name="push_whitelist_usernames", EmitDefaultValue=false)]
        public List<string> PushWhitelistUsernames { get; set; }

        /// <summary>
        /// Gets or Sets RequireSignedCommits
        /// </summary>
        [DataMember(Name="require_signed_commits", EmitDefaultValue=false)]
        public bool RequireSignedCommits { get; set; }

        /// <summary>
        /// Gets or Sets RequiredApprovals
        /// </summary>
        [DataMember(Name="required_approvals", EmitDefaultValue=false)]
        public long RequiredApprovals { get; set; }

        /// <summary>
        /// Gets or Sets StatusCheckContexts
        /// </summary>
        [DataMember(Name="status_check_contexts", EmitDefaultValue=false)]
        public List<string> StatusCheckContexts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditBranchProtectionOption {\n");
            sb.Append("  ApprovalsWhitelistTeams: ").Append(ApprovalsWhitelistTeams).Append("\n");
            sb.Append("  ApprovalsWhitelistUsername: ").Append(ApprovalsWhitelistUsername).Append("\n");
            sb.Append("  BlockOnOutdatedBranch: ").Append(BlockOnOutdatedBranch).Append("\n");
            sb.Append("  BlockOnRejectedReviews: ").Append(BlockOnRejectedReviews).Append("\n");
            sb.Append("  DismissStaleApprovals: ").Append(DismissStaleApprovals).Append("\n");
            sb.Append("  EnableApprovalsWhitelist: ").Append(EnableApprovalsWhitelist).Append("\n");
            sb.Append("  EnableMergeWhitelist: ").Append(EnableMergeWhitelist).Append("\n");
            sb.Append("  EnablePush: ").Append(EnablePush).Append("\n");
            sb.Append("  EnablePushWhitelist: ").Append(EnablePushWhitelist).Append("\n");
            sb.Append("  EnableStatusCheck: ").Append(EnableStatusCheck).Append("\n");
            sb.Append("  MergeWhitelistTeams: ").Append(MergeWhitelistTeams).Append("\n");
            sb.Append("  MergeWhitelistUsernames: ").Append(MergeWhitelistUsernames).Append("\n");
            sb.Append("  ProtectedFilePatterns: ").Append(ProtectedFilePatterns).Append("\n");
            sb.Append("  PushWhitelistDeployKeys: ").Append(PushWhitelistDeployKeys).Append("\n");
            sb.Append("  PushWhitelistTeams: ").Append(PushWhitelistTeams).Append("\n");
            sb.Append("  PushWhitelistUsernames: ").Append(PushWhitelistUsernames).Append("\n");
            sb.Append("  RequireSignedCommits: ").Append(RequireSignedCommits).Append("\n");
            sb.Append("  RequiredApprovals: ").Append(RequiredApprovals).Append("\n");
            sb.Append("  StatusCheckContexts: ").Append(StatusCheckContexts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditBranchProtectionOption);
        }

        /// <summary>
        /// Returns true if EditBranchProtectionOption instances are equal
        /// </summary>
        /// <param name="input">Instance of EditBranchProtectionOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditBranchProtectionOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApprovalsWhitelistTeams == input.ApprovalsWhitelistTeams ||
                    this.ApprovalsWhitelistTeams != null &&
                    input.ApprovalsWhitelistTeams != null &&
                    this.ApprovalsWhitelistTeams.SequenceEqual(input.ApprovalsWhitelistTeams)
                ) && 
                (
                    this.ApprovalsWhitelistUsername == input.ApprovalsWhitelistUsername ||
                    this.ApprovalsWhitelistUsername != null &&
                    input.ApprovalsWhitelistUsername != null &&
                    this.ApprovalsWhitelistUsername.SequenceEqual(input.ApprovalsWhitelistUsername)
                ) && 
                (
                    this.BlockOnOutdatedBranch == input.BlockOnOutdatedBranch ||
                    (this.BlockOnOutdatedBranch != null &&
                    this.BlockOnOutdatedBranch.Equals(input.BlockOnOutdatedBranch))
                ) && 
                (
                    this.BlockOnRejectedReviews == input.BlockOnRejectedReviews ||
                    (this.BlockOnRejectedReviews != null &&
                    this.BlockOnRejectedReviews.Equals(input.BlockOnRejectedReviews))
                ) && 
                (
                    this.DismissStaleApprovals == input.DismissStaleApprovals ||
                    (this.DismissStaleApprovals != null &&
                    this.DismissStaleApprovals.Equals(input.DismissStaleApprovals))
                ) && 
                (
                    this.EnableApprovalsWhitelist == input.EnableApprovalsWhitelist ||
                    (this.EnableApprovalsWhitelist != null &&
                    this.EnableApprovalsWhitelist.Equals(input.EnableApprovalsWhitelist))
                ) && 
                (
                    this.EnableMergeWhitelist == input.EnableMergeWhitelist ||
                    (this.EnableMergeWhitelist != null &&
                    this.EnableMergeWhitelist.Equals(input.EnableMergeWhitelist))
                ) && 
                (
                    this.EnablePush == input.EnablePush ||
                    (this.EnablePush != null &&
                    this.EnablePush.Equals(input.EnablePush))
                ) && 
                (
                    this.EnablePushWhitelist == input.EnablePushWhitelist ||
                    (this.EnablePushWhitelist != null &&
                    this.EnablePushWhitelist.Equals(input.EnablePushWhitelist))
                ) && 
                (
                    this.EnableStatusCheck == input.EnableStatusCheck ||
                    (this.EnableStatusCheck != null &&
                    this.EnableStatusCheck.Equals(input.EnableStatusCheck))
                ) && 
                (
                    this.MergeWhitelistTeams == input.MergeWhitelistTeams ||
                    this.MergeWhitelistTeams != null &&
                    input.MergeWhitelistTeams != null &&
                    this.MergeWhitelistTeams.SequenceEqual(input.MergeWhitelistTeams)
                ) && 
                (
                    this.MergeWhitelistUsernames == input.MergeWhitelistUsernames ||
                    this.MergeWhitelistUsernames != null &&
                    input.MergeWhitelistUsernames != null &&
                    this.MergeWhitelistUsernames.SequenceEqual(input.MergeWhitelistUsernames)
                ) && 
                (
                    this.ProtectedFilePatterns == input.ProtectedFilePatterns ||
                    (this.ProtectedFilePatterns != null &&
                    this.ProtectedFilePatterns.Equals(input.ProtectedFilePatterns))
                ) && 
                (
                    this.PushWhitelistDeployKeys == input.PushWhitelistDeployKeys ||
                    (this.PushWhitelistDeployKeys != null &&
                    this.PushWhitelistDeployKeys.Equals(input.PushWhitelistDeployKeys))
                ) && 
                (
                    this.PushWhitelistTeams == input.PushWhitelistTeams ||
                    this.PushWhitelistTeams != null &&
                    input.PushWhitelistTeams != null &&
                    this.PushWhitelistTeams.SequenceEqual(input.PushWhitelistTeams)
                ) && 
                (
                    this.PushWhitelistUsernames == input.PushWhitelistUsernames ||
                    this.PushWhitelistUsernames != null &&
                    input.PushWhitelistUsernames != null &&
                    this.PushWhitelistUsernames.SequenceEqual(input.PushWhitelistUsernames)
                ) && 
                (
                    this.RequireSignedCommits == input.RequireSignedCommits ||
                    (this.RequireSignedCommits != null &&
                    this.RequireSignedCommits.Equals(input.RequireSignedCommits))
                ) && 
                (
                    this.RequiredApprovals == input.RequiredApprovals ||
                    (this.RequiredApprovals != null &&
                    this.RequiredApprovals.Equals(input.RequiredApprovals))
                ) && 
                (
                    this.StatusCheckContexts == input.StatusCheckContexts ||
                    this.StatusCheckContexts != null &&
                    input.StatusCheckContexts != null &&
                    this.StatusCheckContexts.SequenceEqual(input.StatusCheckContexts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApprovalsWhitelistTeams != null)
                    hashCode = hashCode * 59 + this.ApprovalsWhitelistTeams.GetHashCode();
                if (this.ApprovalsWhitelistUsername != null)
                    hashCode = hashCode * 59 + this.ApprovalsWhitelistUsername.GetHashCode();
                if (this.BlockOnOutdatedBranch != null)
                    hashCode = hashCode * 59 + this.BlockOnOutdatedBranch.GetHashCode();
                if (this.BlockOnRejectedReviews != null)
                    hashCode = hashCode * 59 + this.BlockOnRejectedReviews.GetHashCode();
                if (this.DismissStaleApprovals != null)
                    hashCode = hashCode * 59 + this.DismissStaleApprovals.GetHashCode();
                if (this.EnableApprovalsWhitelist != null)
                    hashCode = hashCode * 59 + this.EnableApprovalsWhitelist.GetHashCode();
                if (this.EnableMergeWhitelist != null)
                    hashCode = hashCode * 59 + this.EnableMergeWhitelist.GetHashCode();
                if (this.EnablePush != null)
                    hashCode = hashCode * 59 + this.EnablePush.GetHashCode();
                if (this.EnablePushWhitelist != null)
                    hashCode = hashCode * 59 + this.EnablePushWhitelist.GetHashCode();
                if (this.EnableStatusCheck != null)
                    hashCode = hashCode * 59 + this.EnableStatusCheck.GetHashCode();
                if (this.MergeWhitelistTeams != null)
                    hashCode = hashCode * 59 + this.MergeWhitelistTeams.GetHashCode();
                if (this.MergeWhitelistUsernames != null)
                    hashCode = hashCode * 59 + this.MergeWhitelistUsernames.GetHashCode();
                if (this.ProtectedFilePatterns != null)
                    hashCode = hashCode * 59 + this.ProtectedFilePatterns.GetHashCode();
                if (this.PushWhitelistDeployKeys != null)
                    hashCode = hashCode * 59 + this.PushWhitelistDeployKeys.GetHashCode();
                if (this.PushWhitelistTeams != null)
                    hashCode = hashCode * 59 + this.PushWhitelistTeams.GetHashCode();
                if (this.PushWhitelistUsernames != null)
                    hashCode = hashCode * 59 + this.PushWhitelistUsernames.GetHashCode();
                if (this.RequireSignedCommits != null)
                    hashCode = hashCode * 59 + this.RequireSignedCommits.GetHashCode();
                if (this.RequiredApprovals != null)
                    hashCode = hashCode * 59 + this.RequiredApprovals.GetHashCode();
                if (this.StatusCheckContexts != null)
                    hashCode = hashCode * 59 + this.StatusCheckContexts.GetHashCode();
                return hashCode;
            }
        }
    }

}
