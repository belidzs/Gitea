/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// PullRequest represents a pull request
    /// </summary>
    [DataContract]
    public partial class PullRequest :  IEquatable<PullRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PullRequest" /> class.
        /// </summary>
        /// <param name="assignee">assignee.</param>
        /// <param name="assignees">assignees.</param>
        /// <param name="_base">_base.</param>
        /// <param name="body">body.</param>
        /// <param name="closedAt">closedAt.</param>
        /// <param name="comments">comments.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="diffUrl">diffUrl.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="head">head.</param>
        /// <param name="htmlUrl">htmlUrl.</param>
        /// <param name="id">id.</param>
        /// <param name="isLocked">isLocked.</param>
        /// <param name="labels">labels.</param>
        /// <param name="mergeBase">mergeBase.</param>
        /// <param name="mergeCommitSha">mergeCommitSha.</param>
        /// <param name="mergeable">mergeable.</param>
        /// <param name="merged">merged.</param>
        /// <param name="mergedAt">mergedAt.</param>
        /// <param name="mergedBy">mergedBy.</param>
        /// <param name="milestone">milestone.</param>
        /// <param name="number">number.</param>
        /// <param name="patchUrl">patchUrl.</param>
        /// <param name="state">StateType issue state type.</param>
        /// <param name="title">title.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="url">url.</param>
        /// <param name="user">user.</param>
        public PullRequest(User assignee = default(User), List<User> assignees = default(List<User>), PRBranchInfo _base = default(PRBranchInfo), string body = default(string), DateTime closedAt = default(DateTime), long comments = default(long), DateTime createdAt = default(DateTime), string diffUrl = default(string), DateTime dueDate = default(DateTime), PRBranchInfo head = default(PRBranchInfo), string htmlUrl = default(string), long id = default(long), bool isLocked = default(bool), List<Label> labels = default(List<Label>), string mergeBase = default(string), string mergeCommitSha = default(string), bool mergeable = default(bool), bool merged = default(bool), DateTime mergedAt = default(DateTime), User mergedBy = default(User), Milestone milestone = default(Milestone), long number = default(long), string patchUrl = default(string), string state = default(string), string title = default(string), DateTime updatedAt = default(DateTime), string url = default(string), User user = default(User))
        {
            this.Assignee = assignee;
            this.Assignees = assignees;
            this.Base = _base;
            this.Body = body;
            this.ClosedAt = closedAt;
            this.Comments = comments;
            this.CreatedAt = createdAt;
            this.DiffUrl = diffUrl;
            this.DueDate = dueDate;
            this.Head = head;
            this.HtmlUrl = htmlUrl;
            this.Id = id;
            this.IsLocked = isLocked;
            this.Labels = labels;
            this.MergeBase = mergeBase;
            this.MergeCommitSha = mergeCommitSha;
            this.Mergeable = mergeable;
            this.Merged = merged;
            this.MergedAt = mergedAt;
            this.MergedBy = mergedBy;
            this.Milestone = milestone;
            this.Number = number;
            this.PatchUrl = patchUrl;
            this.State = state;
            this.Title = title;
            this.UpdatedAt = updatedAt;
            this.Url = url;
            this.User = user;
        }
        
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public User Assignee { get; set; }

        /// <summary>
        /// Gets or Sets Assignees
        /// </summary>
        [DataMember(Name="assignees", EmitDefaultValue=false)]
        public List<User> Assignees { get; set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [DataMember(Name="base", EmitDefaultValue=false)]
        public PRBranchInfo Base { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ClosedAt
        /// </summary>
        [DataMember(Name="closed_at", EmitDefaultValue=false)]
        public DateTime ClosedAt { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public long Comments { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets DiffUrl
        /// </summary>
        [DataMember(Name="diff_url", EmitDefaultValue=false)]
        public string DiffUrl { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Head
        /// </summary>
        [DataMember(Name="head", EmitDefaultValue=false)]
        public PRBranchInfo Head { get; set; }

        /// <summary>
        /// Gets or Sets HtmlUrl
        /// </summary>
        [DataMember(Name="html_url", EmitDefaultValue=false)]
        public string HtmlUrl { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name="is_locked", EmitDefaultValue=false)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<Label> Labels { get; set; }

        /// <summary>
        /// Gets or Sets MergeBase
        /// </summary>
        [DataMember(Name="merge_base", EmitDefaultValue=false)]
        public string MergeBase { get; set; }

        /// <summary>
        /// Gets or Sets MergeCommitSha
        /// </summary>
        [DataMember(Name="merge_commit_sha", EmitDefaultValue=false)]
        public string MergeCommitSha { get; set; }

        /// <summary>
        /// Gets or Sets Mergeable
        /// </summary>
        [DataMember(Name="mergeable", EmitDefaultValue=false)]
        public bool Mergeable { get; set; }

        /// <summary>
        /// Gets or Sets Merged
        /// </summary>
        [DataMember(Name="merged", EmitDefaultValue=false)]
        public bool Merged { get; set; }

        /// <summary>
        /// Gets or Sets MergedAt
        /// </summary>
        [DataMember(Name="merged_at", EmitDefaultValue=false)]
        public DateTime MergedAt { get; set; }

        /// <summary>
        /// Gets or Sets MergedBy
        /// </summary>
        [DataMember(Name="merged_by", EmitDefaultValue=false)]
        public User MergedBy { get; set; }

        /// <summary>
        /// Gets or Sets Milestone
        /// </summary>
        [DataMember(Name="milestone", EmitDefaultValue=false)]
        public Milestone Milestone { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public long Number { get; set; }

        /// <summary>
        /// Gets or Sets PatchUrl
        /// </summary>
        [DataMember(Name="patch_url", EmitDefaultValue=false)]
        public string PatchUrl { get; set; }

        /// <summary>
        /// StateType issue state type
        /// </summary>
        /// <value>StateType issue state type</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PullRequest {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  Assignees: ").Append(Assignees).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DiffUrl: ").Append(DiffUrl).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Head: ").Append(Head).Append("\n");
            sb.Append("  HtmlUrl: ").Append(HtmlUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  MergeBase: ").Append(MergeBase).Append("\n");
            sb.Append("  MergeCommitSha: ").Append(MergeCommitSha).Append("\n");
            sb.Append("  Mergeable: ").Append(Mergeable).Append("\n");
            sb.Append("  Merged: ").Append(Merged).Append("\n");
            sb.Append("  MergedAt: ").Append(MergedAt).Append("\n");
            sb.Append("  MergedBy: ").Append(MergedBy).Append("\n");
            sb.Append("  Milestone: ").Append(Milestone).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PatchUrl: ").Append(PatchUrl).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PullRequest);
        }

        /// <summary>
        /// Returns true if PullRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PullRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assignee == input.Assignee ||
                    (this.Assignee != null &&
                    this.Assignee.Equals(input.Assignee))
                ) && 
                (
                    this.Assignees == input.Assignees ||
                    this.Assignees != null &&
                    input.Assignees != null &&
                    this.Assignees.SequenceEqual(input.Assignees)
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.ClosedAt == input.ClosedAt ||
                    (this.ClosedAt != null &&
                    this.ClosedAt.Equals(input.ClosedAt))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DiffUrl == input.DiffUrl ||
                    (this.DiffUrl != null &&
                    this.DiffUrl.Equals(input.DiffUrl))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Head == input.Head ||
                    (this.Head != null &&
                    this.Head.Equals(input.Head))
                ) && 
                (
                    this.HtmlUrl == input.HtmlUrl ||
                    (this.HtmlUrl != null &&
                    this.HtmlUrl.Equals(input.HtmlUrl))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    (this.IsLocked != null &&
                    this.IsLocked.Equals(input.IsLocked))
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    input.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.MergeBase == input.MergeBase ||
                    (this.MergeBase != null &&
                    this.MergeBase.Equals(input.MergeBase))
                ) && 
                (
                    this.MergeCommitSha == input.MergeCommitSha ||
                    (this.MergeCommitSha != null &&
                    this.MergeCommitSha.Equals(input.MergeCommitSha))
                ) && 
                (
                    this.Mergeable == input.Mergeable ||
                    (this.Mergeable != null &&
                    this.Mergeable.Equals(input.Mergeable))
                ) && 
                (
                    this.Merged == input.Merged ||
                    (this.Merged != null &&
                    this.Merged.Equals(input.Merged))
                ) && 
                (
                    this.MergedAt == input.MergedAt ||
                    (this.MergedAt != null &&
                    this.MergedAt.Equals(input.MergedAt))
                ) && 
                (
                    this.MergedBy == input.MergedBy ||
                    (this.MergedBy != null &&
                    this.MergedBy.Equals(input.MergedBy))
                ) && 
                (
                    this.Milestone == input.Milestone ||
                    (this.Milestone != null &&
                    this.Milestone.Equals(input.Milestone))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PatchUrl == input.PatchUrl ||
                    (this.PatchUrl != null &&
                    this.PatchUrl.Equals(input.PatchUrl))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assignee != null)
                    hashCode = hashCode * 59 + this.Assignee.GetHashCode();
                if (this.Assignees != null)
                    hashCode = hashCode * 59 + this.Assignees.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.ClosedAt != null)
                    hashCode = hashCode * 59 + this.ClosedAt.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DiffUrl != null)
                    hashCode = hashCode * 59 + this.DiffUrl.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Head != null)
                    hashCode = hashCode * 59 + this.Head.GetHashCode();
                if (this.HtmlUrl != null)
                    hashCode = hashCode * 59 + this.HtmlUrl.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsLocked != null)
                    hashCode = hashCode * 59 + this.IsLocked.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.MergeBase != null)
                    hashCode = hashCode * 59 + this.MergeBase.GetHashCode();
                if (this.MergeCommitSha != null)
                    hashCode = hashCode * 59 + this.MergeCommitSha.GetHashCode();
                if (this.Mergeable != null)
                    hashCode = hashCode * 59 + this.Mergeable.GetHashCode();
                if (this.Merged != null)
                    hashCode = hashCode * 59 + this.Merged.GetHashCode();
                if (this.MergedAt != null)
                    hashCode = hashCode * 59 + this.MergedAt.GetHashCode();
                if (this.MergedBy != null)
                    hashCode = hashCode * 59 + this.MergedBy.GetHashCode();
                if (this.Milestone != null)
                    hashCode = hashCode * 59 + this.Milestone.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.PatchUrl != null)
                    hashCode = hashCode * 59 + this.PatchUrl.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }
    }

}
