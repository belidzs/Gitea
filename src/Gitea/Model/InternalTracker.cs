/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// InternalTracker represents settings for internal tracker
    /// </summary>
    [DataContract]
    public partial class InternalTracker :  IEquatable<InternalTracker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InternalTracker" /> class.
        /// </summary>
        /// <param name="allowOnlyContributorsToTrackTime">Let only contributors track time (Built-in issue tracker).</param>
        /// <param name="enableIssueDependencies">Enable dependencies for issues and pull requests (Built-in issue tracker).</param>
        /// <param name="enableTimeTracker">Enable time tracking (Built-in issue tracker).</param>
        public InternalTracker(bool allowOnlyContributorsToTrackTime = default(bool), bool enableIssueDependencies = default(bool), bool enableTimeTracker = default(bool))
        {
            this.AllowOnlyContributorsToTrackTime = allowOnlyContributorsToTrackTime;
            this.EnableIssueDependencies = enableIssueDependencies;
            this.EnableTimeTracker = enableTimeTracker;
        }
        
        /// <summary>
        /// Let only contributors track time (Built-in issue tracker)
        /// </summary>
        /// <value>Let only contributors track time (Built-in issue tracker)</value>
        [DataMember(Name="allow_only_contributors_to_track_time", EmitDefaultValue=false)]
        public bool AllowOnlyContributorsToTrackTime { get; set; }

        /// <summary>
        /// Enable dependencies for issues and pull requests (Built-in issue tracker)
        /// </summary>
        /// <value>Enable dependencies for issues and pull requests (Built-in issue tracker)</value>
        [DataMember(Name="enable_issue_dependencies", EmitDefaultValue=false)]
        public bool EnableIssueDependencies { get; set; }

        /// <summary>
        /// Enable time tracking (Built-in issue tracker)
        /// </summary>
        /// <value>Enable time tracking (Built-in issue tracker)</value>
        [DataMember(Name="enable_time_tracker", EmitDefaultValue=false)]
        public bool EnableTimeTracker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InternalTracker {\n");
            sb.Append("  AllowOnlyContributorsToTrackTime: ").Append(AllowOnlyContributorsToTrackTime).Append("\n");
            sb.Append("  EnableIssueDependencies: ").Append(EnableIssueDependencies).Append("\n");
            sb.Append("  EnableTimeTracker: ").Append(EnableTimeTracker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InternalTracker);
        }

        /// <summary>
        /// Returns true if InternalTracker instances are equal
        /// </summary>
        /// <param name="input">Instance of InternalTracker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternalTracker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowOnlyContributorsToTrackTime == input.AllowOnlyContributorsToTrackTime ||
                    (this.AllowOnlyContributorsToTrackTime != null &&
                    this.AllowOnlyContributorsToTrackTime.Equals(input.AllowOnlyContributorsToTrackTime))
                ) && 
                (
                    this.EnableIssueDependencies == input.EnableIssueDependencies ||
                    (this.EnableIssueDependencies != null &&
                    this.EnableIssueDependencies.Equals(input.EnableIssueDependencies))
                ) && 
                (
                    this.EnableTimeTracker == input.EnableTimeTracker ||
                    (this.EnableTimeTracker != null &&
                    this.EnableTimeTracker.Equals(input.EnableTimeTracker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowOnlyContributorsToTrackTime != null)
                    hashCode = hashCode * 59 + this.AllowOnlyContributorsToTrackTime.GetHashCode();
                if (this.EnableIssueDependencies != null)
                    hashCode = hashCode * 59 + this.EnableIssueDependencies.GetHashCode();
                if (this.EnableTimeTracker != null)
                    hashCode = hashCode * 59 + this.EnableTimeTracker.GetHashCode();
                return hashCode;
            }
        }
    }

}
