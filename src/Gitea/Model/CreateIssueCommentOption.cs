/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateIssueCommentOption options for creating a comment on an issue
    /// </summary>
    [DataContract]
    public partial class CreateIssueCommentOption :  IEquatable<CreateIssueCommentOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssueCommentOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateIssueCommentOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateIssueCommentOption" /> class.
        /// </summary>
        /// <param name="body">body (required).</param>
        public CreateIssueCommentOption(string body = default(string))
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for CreateIssueCommentOption and cannot be null");
            }
            else
            {
                this.Body = body;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateIssueCommentOption {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateIssueCommentOption);
        }

        /// <summary>
        /// Returns true if CreateIssueCommentOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateIssueCommentOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateIssueCommentOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                return hashCode;
            }
        }
    }

}
