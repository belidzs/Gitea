/* 
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Gitea.Client.OpenAPIDateConverter;

namespace Gitea.Model
{
    /// <summary>
    /// CreateUserOption create user options
    /// </summary>
    [DataContract]
    public partial class CreateUserOption :  IEquatable<CreateUserOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateUserOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateUserOption" /> class.
        /// </summary>
        /// <param name="email">email (required).</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="loginName">loginName.</param>
        /// <param name="mustChangePassword">mustChangePassword.</param>
        /// <param name="password">password (required).</param>
        /// <param name="sendNotify">sendNotify.</param>
        /// <param name="sourceId">sourceId.</param>
        /// <param name="username">username (required).</param>
        public CreateUserOption(string email = default(string), string fullName = default(string), string loginName = default(string), bool mustChangePassword = default(bool), string password = default(string), bool sendNotify = default(bool), long sourceId = default(long), string username = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for CreateUserOption and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for CreateUserOption and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for CreateUserOption and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            
            this.FullName = fullName;
            this.LoginName = loginName;
            this.MustChangePassword = mustChangePassword;
            this.SendNotify = sendNotify;
            this.SourceId = sourceId;
        }
        
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets LoginName
        /// </summary>
        [DataMember(Name="login_name", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// Gets or Sets MustChangePassword
        /// </summary>
        [DataMember(Name="must_change_password", EmitDefaultValue=false)]
        public bool MustChangePassword { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets SendNotify
        /// </summary>
        [DataMember(Name="send_notify", EmitDefaultValue=false)]
        public bool SendNotify { get; set; }

        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public long SourceId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUserOption {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  MustChangePassword: ").Append(MustChangePassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  SendNotify: ").Append(SendNotify).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateUserOption);
        }

        /// <summary>
        /// Returns true if CreateUserOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateUserOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUserOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.MustChangePassword == input.MustChangePassword ||
                    (this.MustChangePassword != null &&
                    this.MustChangePassword.Equals(input.MustChangePassword))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.SendNotify == input.SendNotify ||
                    (this.SendNotify != null &&
                    this.SendNotify.Equals(input.SendNotify))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.MustChangePassword != null)
                    hashCode = hashCode * 59 + this.MustChangePassword.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.SendNotify != null)
                    hashCode = hashCode * 59 + this.SendNotify.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }
    }

}
